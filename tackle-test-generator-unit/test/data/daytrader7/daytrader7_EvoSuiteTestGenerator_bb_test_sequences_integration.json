{
  "test_sequences" : {
    "com.ibm.websphere.samples.daytrader.web.prims.PingBean" : {
      "sequences" : [ "{\r\n    PingBean pingBean0 = new PingBean();\r\n    String string0 = pingBean0.getMsg();\r\n}", "{\r\n    PingBean pingBean0 = new PingBean();\r\n    pingBean0.setMsg(\"?dGT5\");\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.prims.PingBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean" : {
      "sequences" : [ "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setCancelledOrderCount(1303);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    String string0 = runStatsDataBean0.toString();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeStockCount(725);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    int int0 = runStatsDataBean0.getTradeStockCount();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSellOrderCount(113);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOrderCount((-1));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setBuyOrderCount(725);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLoginCount((-2789));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setNewUserCount(1);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setDeletedOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLogoutCount((-1));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setHoldingCount(725);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeUserCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOpenOrderCount(113);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean" : {
      "sequences" : [ "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    holdingDataBean0.setQuote(quoteDataBean0);\r\n    String string0 = holdingDataBean0.toString();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 839L);\r\n    MockDate mockDate0 = new MockDate(0, 0, 5000, (-1), 0);\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(0, bigDecimal0, mockDate0, (AccountDataBean) null, (QuoteDataBean) null);\r\n    Integer integer0 = new Integer(5000);\r\n    HoldingDataBean holdingDataBean1 = new HoldingDataBean(integer0, 839L, bigDecimal0, mockDate0, \"ZnnD(u:&Y//I>\");\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean1);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    Integer integer0 = new Integer(0);\r\n    boolean boolean0 = holdingDataBean0.equals(integer0);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    holdingDataBean0.print();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    String string0 = holdingDataBean0.toHTML();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    AccountDataBean accountDataBean0 = holdingDataBean0.getAccount();\r\n}", "{\r\n    Integer integer0 = new Integer((-1152));\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-1152));\r\n    MockDate mockDate0 = new MockDate((-1759), (-1152), (-1152), (-1152), (-1152));\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(integer0, 0.0, bigDecimal0, mockDate0, \"<LI>       quoteID:\");\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean0);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    QuoteDataBean quoteDataBean0 = holdingDataBean0.getQuote();\r\n}", "{\r\n    Integer integer0 = new Integer((-1152));\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-1152));\r\n    MockDate mockDate0 = new MockDate((-1759), (-1152), (-1152), (-1152), (-1152));\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(integer0, 0.0, bigDecimal0, mockDate0, \"<LI>       quoteID:\");\r\n    HoldingDataBean holdingDataBean1 = new HoldingDataBean();\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean1);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    Integer integer0 = new Integer(0);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    MockDate mockDate0 = new MockDate();\r\n    HoldingDataBean holdingDataBean1 = new HoldingDataBean(integer0, (-1.0), bigDecimal0, mockDate0, \"<BR>Holding Data for holding: \");\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean1);\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeBuildDB" : {
      "sequences" : [ "{\r\n    String string0 = \"]u\";\r\n    String string1 = \"YXJS`YRkso9i(P$7\";\r\n    MockPrintWriter mockPrintWriter0 = null;\r\n    try {\r\n        mockPrintWriter0 = new MockPrintWriter(\"]u\", \"YXJS`YRkso9i(P$7\");\r\n    } catch (Throwable e) {\r\n        // \r\n        // YXJS`YRkso9i(P$7\r\n        // \r\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockPrintWriter\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    byte[] byteArray0 = new byte[1];\r\n    byteArray0[0] = (byte) (-96);\r\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    TradeConfig.MAXIMUM_STOCK_PRICE = bigDecimal0;\r\n    String[] stringArray0 = new String[4];\r\n    stringArray0[0] = \" NX7Iyr\";\r\n    stringArray0[1] = \"\";\r\n    stringArray0[2] = \"5>-Ex\";\r\n    stringArray0[3] = \"TradeConfig.setConfigParm(..): minor exception caughttrying to set WebInterface to \";\r\n    TradeBuildDB.main(stringArray0);\r\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\r\n    PipedInputStream pipedInputStream0 = null;\r\n    try {\r\n        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte) (-96));\r\n    } catch (IllegalArgumentException e) {\r\n        // \r\n        // Pipe Size <= 0\r\n        // \r\n        verifyException(\"java.io.PipedInputStream\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    PipedInputStream pipedInputStream0 = null;\r\n    try {\r\n        pipedInputStream0 = new PipedInputStream((-4552));\r\n    } catch (IllegalArgumentException e) {\r\n        // \r\n        // Pipe Size <= 0\r\n        // \r\n        verifyException(\"java.io.PipedInputStream\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    String[] stringArray0 = new String[6];\r\n    stringArray0[0] = \"?~G7I\";\r\n    stringArray0[1] = \"\";\r\n    stringArray0[2] = \"uid:\";\r\n    stringArray0[3] = \"b5<nT#V(.[ oH4q\";\r\n    stringArray0[4] = \"j\";\r\n    stringArray0[5] = \"iBA`/q!$4CN\";\r\n    TradeBuildDB.main(stringArray0);\r\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\r\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);\r\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);\r\n    int int0 = (-806);\r\n    byte[] byteArray0 = new byte[8];\r\n    byteArray0[0] = (byte) 0;\r\n    byteArray0[1] = (byte) 6;\r\n    byteArray0[2] = (byte) (-48);\r\n    byteArray0[3] = (byte) (-4);\r\n    byteArray0[4] = (byte) 0;\r\n    byteArray0[5] = (byte) 55;\r\n    byteArray0[6] = (byte) 85;\r\n    byteArray0[7] = (byte) 110;\r\n    try {\r\n        pushbackInputStream0.read(byteArray0);\r\n    } catch (IOException e) {\r\n        // \r\n        // Pipe not connected\r\n        // \r\n        verifyException(\"java.io.PipedInputStream\", e);\r\n    }\r\n}", "{\r\n    StringWriter stringWriter0 = new StringWriter();\r\n    StringWriter stringWriter1 = stringWriter0.append('>');\r\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);\r\n    Locale locale0 = Locale.GERMANY;\r\n    Locale locale1 = locale0.stripExtensions();\r\n    String string0 = \"\\\";@;{3r1C}CB5\";\r\n    Object[] objectArray0 = new Object[5];\r\n    objectArray0[0] = (Object) locale1;\r\n    objectArray0[1] = (Object) mockPrintWriter0;\r\n    objectArray0[2] = (Object) locale1;\r\n    objectArray0[3] = (Object) \"\\\";@;{3r1C}CB5\";\r\n    objectArray0[4] = (Object) stringWriter1;\r\n    PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, \"\\\";@;{3r1C}CB5\", objectArray0);\r\n    byte[] byteArray0 = new byte[5];\r\n    byteArray0[0] = (byte) 112;\r\n    byteArray0[1] = (byte) 83;\r\n    byteArray0[2] = (byte) 0;\r\n    byteArray0[3] = (byte) (-76);\r\n    byteArray0[4] = (byte) 0;\r\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\r\n    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);\r\n    BufferedInputStream bufferedInputStream0 = null;\r\n    try {\r\n        bufferedInputStream0 = new BufferedInputStream(dataInputStream0, (byte) 0);\r\n    } catch (IllegalArgumentException e) {\r\n        // \r\n        // Buffer size <= 0\r\n        // \r\n        verifyException(\"java.io.BufferedInputStream\", e);\r\n    }\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "java.io.DataInputStream", "java.io.BufferedInputStream", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.web.TradeBuildDB", "java.io.PushbackInputStream", "java.io.StringWriter", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "java.io.IOException", "static org.junit.Assert.*", "java.io.PipedOutputStream", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.io.MockPrintWriter", "java.io.ByteArrayInputStream", "org.evosuite.runtime.EvoRunnerParameters", "java.io.PipedInputStream", "java.util.Locale", "org.evosuite.runtime.EvoRunner", "java.math.BigInteger", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TradeConfig" : {
      "sequences" : [ "{\r\n    TradeConfig.setScenarioCount(0);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"\", \" u9z\");\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_QUOTES();\r\n}", "{\r\n    float float0 = TradeConfig.rndPrice();\r\n    String string0 = TradeConfig.rndSymbol();\r\n    char char0 = TradeConfig.getScenarioAction(true);\r\n}", "{\r\n    TradeConfig.setMAX_HOLDINGS((-998));\r\n}", "{\r\n    float float0 = TradeConfig.rndPrice();\r\n    String string0 = TradeConfig.rndSymbols();\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getPublishQuotePriceChange();\r\n}", "{\r\n    TradeConfig.setRunTimeMode(0);\r\n}", "{\r\n    TradeConfig.setWebInterface(1);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();\r\n}", "{\r\n    TradeConfig.RND_USER = false;\r\n    String string0 = TradeConfig.getUserID();\r\n}", "{\r\n    TradeConfig.setMAX_USERS(0);\r\n    // Undeclared exception!\r\n    try {\r\n        TradeConfig.getUserID();\r\n    } catch (IndexOutOfBoundsException e) {\r\n        // \r\n        // Index: 0, Size: 0\r\n        // \r\n        verifyException(\"java.util.ArrayList\", e);\r\n    }\r\n}", "{\r\n    TradeConfig.setConfigParam(\"orderprocessingmode\", \"SELL\");\r\n}", "{\r\n    TradeConfig.setConfigParam((String) null, \"jsbI\");\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getRunTimeModeNames();\r\n    TradeConfig.setRunTimeModeNames(stringArray0);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getActionTrace();\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();\r\n}", "{\r\n    int int0 = TradeConfig.getMarketSummaryInterval();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"maxquotes\", \"=-3:x[Zr-(|vb^O\");\r\n}", "{\r\n    String string0 = TradeConfig.rndAddress();\r\n    String string1 = TradeConfig.rndCreditCard();\r\n    String string2 = TradeConfig.rndAddress();\r\n    float float0 = TradeConfig.rndFloat(0);\r\n    String string3 = TradeConfig.rndFullName();\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    TradeConfig.setPercentSentToWebsocket(0);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"maxusers\", \"uid:0\");\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getLongRun();\r\n}", "{\r\n    TradeConfig.setLongRun(false);\r\n}", "{\r\n    int int0 = TradeConfig.getAccessMode();\r\n}", "{\r\n    String string0 = TradeConfig.rndEmail(\"uid:0\");\r\n}", "{\r\n    int int0 = TradeConfig.getOrderProcessingMode();\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_HOLDINGS();\r\n}", "{\r\n    TradeConfig.setAccessMode(2299);\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"SELL\");\r\n}", "{\r\n    float float0 = TradeConfig.rndQuantity();\r\n}", "{\r\n    String string0 = TradeConfig.rndNewUserID();\r\n    String string1 = TradeConfig.rndNewUserID();\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    TradeConfig.setMAX_USERS(2643);\r\n    String string0 = TradeConfig.rndUserID();\r\n}", "{\r\n    TradeConfig.setMarketSummaryInterval(1000);\r\n}", "{\r\n    TradeConfig.setPublishQuotePriceChange(true);\r\n}", "{\r\n    TradeConfig.setMAX_USERS(2299);\r\n    String string0 = TradeConfig.rndUserID();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"WebInterface\", \"WebInterface\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"buy\");\r\n}", "{\r\n    TradeConfig tradeConfig0 = new TradeConfig();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getUpdateQuotePrices();\r\n}", "{\r\n    String string0 = TradeConfig.getPage(0);\r\n}", "{\r\n    TradeConfig.setOrderProcessingMode(1);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"primiterations\", \"uid:1\");\r\n}", "{\r\n    TradeConfig.setMAX_QUOTES(5);\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getWebInterfaceNames();\r\n}", "{\r\n    TradeConfig.setUpdateQuotePrices(false);\r\n}", "{\r\n    TradeConfig.setDisplayOrderAlerts(true);\r\n}", "{\r\n    int int0 = TradeConfig.getWebInterface();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"runtimemode\", \"U}ZV2tPcda#\\\"5t3Y~3r\");\r\n}", "{\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    int int0 = TradeConfig.getPercentSentToWebsocket();\r\n}", "{\r\n    int[][] intArray0 = TradeConfig.getScenarioMixes();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n}", "{\r\n    String string0 = TradeConfig.rndBalance();\r\n}", "{\r\n    TradeConfig.setPrimIterations((-1848));\r\n}", "{\r\n    TradeConfig.setConfigParam(\"^36Xh]P`u*j:jDM6E\", \"^36Xh]P`u*j:jDM6E\");\r\n}", "{\r\n    int int0 = TradeConfig.getRunTimeMode();\r\n}", "{\r\n    TradeConfig.setJDBCDriverNeedsGlobalTransation(false);\r\n}", "{\r\n    TradeConfig.setActionTrace(true);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.rndBoolean();\r\n}", "{\r\n    TradeConfig.setUseRemoteEJBInterface(false);\r\n}", "{\r\n    int int0 = TradeConfig.getPrimIterations();\r\n}", "{\r\n    int int0 = TradeConfig.getScenarioCount();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"${CQm=bF*/lW#~.Ho>\", (String) null);\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(225);\r\n}", "{\r\n    TradeConfig.incrementSellDeficit();\r\n    float float0 = TradeConfig.rndFloat(0);\r\n    String string0 = TradeConfig.rndSymbols();\r\n    double double0 = TradeConfig.random();\r\n    String string1 = TradeConfig.rndAddress();\r\n    String string2 = TradeConfig.rndSymbol();\r\n    String string3 = TradeConfig.rndFullName();\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.useRemoteEJBInterface();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getDisplayOrderAlerts();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountDataBean" : {
      "sequences" : [ "{\r\n    MockDate mockDate0 = new MockDate(2147483645);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(2147483645, 472, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    Integer integer0 = new Integer(122);\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(integer0, (-1065), 122, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"$_Vcb/Qx73J9\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"\", \"\", \"\", \"\", \"m5_\", \"mCmpl>b`}7\");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login(\"sn\");\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: null\r\n        // \\tIncorrect password-->:\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"\", \"\", \"\", \"\", \"m5_\", \"mCmpl>b`}7\");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    accountDataBean0.login(\"\");\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    Instant instant0 = MockInstant.ofEpochMilli(1);\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 1, 1, date0, date0, bigDecimal0, bigDecimal0, \"{qB5vn>\");\r\n    Collection<HoldingDataBean> collection0 = accountDataBean0.getHoldings();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    LinkedList<HoldingDataBean> linkedList0 = new LinkedList<HoldingDataBean>();\r\n    accountDataBean0.setHoldings(linkedList0);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(2147483645);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(2147483645, 472, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean0);\r\n}", "{\r\n    // Undeclared exception!\r\n    AccountDataBean.getRandomInstance();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    Object object0 = new Object();\r\n    boolean boolean0 = accountDataBean0.equals(object0);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    accountDataBean0.logout();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    String string0 = accountDataBean0.toHTML();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(2147483645);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Integer integer0 = new Integer(122);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-1065), 122, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"$_Vcb/Qx73J9\");\r\n    Integer integer1 = new Integer(122);\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(integer1, 122, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(2147483645);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(2147483645, 472, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login(\"$_Vcb/Qx73J9\");\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: nullnull AccountProfile\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(2147483645);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(2147483645, 472, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    Integer integer0 = new Integer(122);\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(integer0, (-1065), 122, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"$_Vcb/Qx73J9\");\r\n    boolean boolean0 = accountDataBean1.equals(accountDataBean0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-1479), (-1479), 0, 0, (-1479));\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 0);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, (String) null);\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    Instant instant0 = MockInstant.ofEpochMilli(1);\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 1, 1, date0, date0, bigDecimal0, bigDecimal0, \"{qB5vn>\");\r\n    accountDataBean0.print();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    Collection<OrderDataBean> collection0 = accountDataBean0.getOrders();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    LinkedHashSet<OrderDataBean> linkedHashSet0 = new LinkedHashSet<OrderDataBean>();\r\n    accountDataBean0.setOrders(linkedHashSet0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Date", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.time.Instant", "javax.ejb.EJBException", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.mock.java.time.MockInstant", "static org.junit.Assert.assertEquals", "java.util.LinkedList", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "java.util.LinkedHashSet", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData" : {
      "sequences" : [ "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(0L);\r\n    Double double0 = new Double((-1589.394913966592));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"Yb5wiP\", bigDecimal0, bigDecimal0, \"Yb5wiP\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getPrice();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setSymbol(\"\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setGain(bigDecimal0);\r\n}", "{\r\n    MathContext mathContext0 = MathContext.UNLIMITED;\r\n    BigDecimal bigDecimal0 = new BigDecimal(2383, mathContext0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"-\");\r\n    BigDecimal bigDecimal1 = quoteData0.getOpen();\r\n}", "{\r\n    MathContext mathContext0 = MathContext.UNLIMITED;\r\n    BigDecimal bigDecimal0 = new BigDecimal(2383, mathContext0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"-\");\r\n    String string0 = quoteData0.getCompanyName();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setHigh(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setGainPercent(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1001.5186193058));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", bigDecimal0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", double0, double0);\r\n    quoteData0.setCompanyName(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setChange(Double.POSITIVE_INFINITY);\r\n}", "{\r\n    MathContext mathContext0 = MathContext.UNLIMITED;\r\n    BigDecimal bigDecimal0 = new BigDecimal(2383, mathContext0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"-\");\r\n    double double0 = quoteData0.getChange();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setPrice(bigDecimal0);\r\n}", "{\r\n    MathContext mathContext0 = MathContext.UNLIMITED;\r\n    BigDecimal bigDecimal0 = new BigDecimal(2383, mathContext0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"-\");\r\n    String string0 = quoteData0.getRange();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getHigh();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    String string0 = quoteData0.getGainPercentHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getGain();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setOpen(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-3036.0217988290233));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"k$.Ml?N<*7Z-yE6T>\", double0, double0);\r\n    quoteData0.setLow(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(4);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"1C2hD2l([]N\\\"<eli\");\r\n    String string0 = quoteData0.getSymbol();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"bC;)?6\");\r\n    BigDecimal bigDecimal1 = quoteData0.getGainPercent();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    double double1 = quoteData0.getVolume();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-3036.0217988290233));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"k$.Ml?N<*7Z-yE6T>\", double0, double0);\r\n    quoteData0.setVolume(27.0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getLow();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(4);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"1C2hD2l([]N\\\"<eli\");\r\n    String string0 = quoteData0.getChangeHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    String string0 = quoteData0.getGainHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(3218.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", bigDecimal0, bigDecimal0, \"<FONT color=\\\"#ff0000\\\">\", double0, double0);\r\n    quoteData0.setRange(\"\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1001.5186193058));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", bigDecimal0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", double0, double0);\r\n    String string0 = quoteData0.getChangeHTML();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "java.math.MathContext", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" : {
      "sequences" : [ "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"ZS#dpD`(6`iQd @9a\");\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean0);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    quoteDataBean0.print();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"ZS#dpD`(6`iQd @9a\");\r\n    QuoteDataBean quoteDataBean1 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    String string0 = quoteDataBean0.toHTML();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    boolean boolean0 = quoteDataBean0.equals(\".$lAD++>^\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.direct.TradeDirect" : {
      "sequences" : [ "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(\"\\\"b|~\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(2299);\r\n    try {\r\n        tradeDirect0.sell(\"\", integer0, 2299);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.getQuote(\"{UK6UQw\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.getQuote((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getOrders(\"TradeDirect:logout -- error logging out user\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer((-5));\r\n    try {\r\n        tradeDirect0.completeOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setOrderProcessingMode(2);\r\n    Integer integer0 = new Integer(2);\r\n    tradeDirect0.queueOrder(integer0, true);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Object[] objectArray0 = new Object[3];\r\n    boolean boolean0 = tradeDirect0.recreateDBTables(objectArray0, (PrintWriter) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    TradeConfig.setUpdateQuotePrices(false);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.updateQuotePriceVolume(\"V0E\", bigDecimal0, 622.555);\r\n}", "{\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = tradeDirect0.getAccountProfileData(\"\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer(2);\r\n    try {\r\n        tradeDirect0.queueOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    tradeDirect0.logout(\"TradeDirect:buy create/begin global transaction\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    Integer integer0 = new Integer(3113);\r\n    OrderDataBean orderDataBean0 = tradeDirect0.sell((String) null, integer0, 3113);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData((-3954));\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer(3046);\r\n    OrderDataBean orderDataBean0 = tradeDirect0.completeOrder(integer0, true);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeDirect.init();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    TradeConfig.setTrace(true);\r\n    Integer integer0 = new Integer((-583));\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    try {\r\n        tradeDirect0.getConnPublic();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getClosedOrders(\"TradeDirect:logout -- error logging out user\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.resetTrade(true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer((-360));\r\n    try {\r\n        tradeDirect0.orderCompleted(\"\\n\\t\\t       price: \", integer0);\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // TradeDirect:orderCompleted method not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    tradeDirect0.logout(\"{UK6UQw\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    TradeConfig.setTrace(true);\r\n    try {\r\n        tradeDirect0.getAccountData((-2521));\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.createQuote(\"TradeDirect:login - inSession(\", \"A(SgucqEh?MBn3@yu\", bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    Integer integer0 = new Integer(1);\r\n    try {\r\n        tradeDirect0.sell(\"TradeDirect:getHoldings - inSession(\", integer0, 1);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    MarketSummaryDataBean marketSummaryDataBean0 = tradeDirect0.getMarketSummary();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    BigInteger bigInteger0 = BigInteger.ZERO;\r\n    TradeConfig.setTrace(true);\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.register(\"keyval\", \"*k)T3f@0\", \"keyval\", (String) null, \"\", \"*k)T3f@0\", bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer(3046);\r\n    HoldingDataBean holdingDataBean0 = tradeDirect0.getHolding(integer0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.login(\"TradeDirect:buy create/begin global transaction\", \"TradeDirect:buy create/begin global transaction\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"\\\"b|~\", \"\", \"\", \"\", \"}.r/\", \"\\\"b|~\");\r\n    AccountProfileDataBean accountProfileDataBean1 = tradeDirect0.updateAccountProfile(accountProfileDataBean0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    try {\r\n        tradeDirect0.updateQuotePriceVolume(\"V0E\", bigDecimal0, 622.555);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = Integer.valueOf(111);\r\n    try {\r\n        tradeDirect0.completeOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = tradeDirect0.getAccountProfileData(\"<LI> completionDate: \");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getOrders(\"\");\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    AccountDataBean accountDataBean0 = tradeDirect0.register(\"TradeDirect:buy create/begin global transaction\", \"TradeDirect:buy create/begin global transaction\", \"TradeDirect:buy create/begin global transaction\", (String) null, (String) null, \"\", bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.checkDBProductName();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(\"D\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    Integer integer0 = new Integer(5000);\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<HoldingDataBean> collection0 = tradeDirect0.getHoldings(\"dXmj%Q\");\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "com.ibm.websphere.samples.daytrader.direct.TradeDirect", "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.math.BigInteger", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TimerStat" : {
      "sequences" : [ "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMax(16);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMin((-1.0));\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMax();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setCount(16);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setTotalTime((-1.0));\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMaxSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getAvgSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMin();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMinSecs();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.util.TimerStat", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean" : {
      "sequences" : [ "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    // Undeclared exception!\r\n    try {\r\n        marketSummaryDataBean0.print();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.setTopLosers((Collection<QuoteDataBean>) null);\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.print();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean(bigDecimal0, bigDecimal0, (-2178.39010687207), (Collection<QuoteDataBean>) null, (Collection<QuoteDataBean>) null);\r\n    marketSummaryDataBean0.print();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.util.Collection", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData" : {
      "sequences" : [ "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    // Undeclared exception!\r\n    try {\r\n        holdingData0.getGainHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setBasis((BigDecimal) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    double double0 = holdingData0.getQuantity();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    holdingData0.setPurchasePrice(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Date date0 = holdingData0.getPurchaseDate();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setMarketValue((BigDecimal) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    holdingData0.setGain(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getBasis();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getMarketValue();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    String string0 = holdingData0.getQuoteID();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    MockDate mockDate0 = new MockDate(1, 1, 0, 0, 854, 0);\r\n    holdingData0.setPurchaseDate(mockDate0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPurchasePrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuantity(242);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuoteID(\"\");\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getGain();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Integer integer0 = new Integer(242);\r\n    holdingData0.setHoldingID(integer0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setPrice((BigDecimal) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Integer integer0 = holdingData0.getHoldingID();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "java.util.Date", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage" : {
      "sequences" : [ "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setKey(\"\");\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getKey();\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getValue();\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setValue(\"\");\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.OrderData" : {
      "sequences" : [ "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    orderData0.setOpenDate(mockDate0);\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    orderData0.setQuantity((-105.0));\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, 972);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"7MY<ShSJ'I`r)F o \", mockDate0, mockDate0, bigDecimal0, \"7MY<ShSJ'I`r)F o \", 972, \"7MY<ShSJ'I`r)F o \", bigDecimal0);\r\n    orderData0.setCompletionDate(mockDate0);\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    String string0 = orderData0.getOrderType();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, 972);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"7MY<ShSJ'I`r)F o \", mockDate0, mockDate0, bigDecimal0, \"7MY<ShSJ'I`r)F o \", 972, \"7MY<ShSJ'I`r)F o \", bigDecimal0);\r\n    orderData0.setOrderType(\"\");\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    Date date0 = orderData0.getCompletionDate();\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    String string0 = orderData0.getOrderStatus();\r\n}", "{\r\n    Integer integer0 = new Integer((-3558));\r\n    MockDate mockDate0 = new MockDate((-1266), (-3558), 0, 0, 0, 1);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"\", (-1266), \"\", bigDecimal0);\r\n    orderData0.setOrderFee(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    double double0 = orderData0.getQuantity();\r\n}", "{\r\n    Integer integer0 = new Integer(828);\r\n    MockDate mockDate0 = new MockDate(1L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \".n{g{<XO?wN#z`Uq\", mockDate0, mockDate0, bigDecimal0, \".n{g{<XO?wN#z`Uq\", 1L, \".n{g{<XO?wN#z`Uq\", bigDecimal0);\r\n    Integer integer1 = orderData0.getOrderID();\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getTotal();\r\n}", "{\r\n    BigInteger bigInteger0 = BigInteger.ZERO;\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", (Date) null, (Date) null, bigDecimal0, \"v'\\\">-z?CCODk^SNb>,\", (-1587.340434807), \"\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getOrderFee();\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    Date date0 = orderData0.getOpenDate();\r\n}", "{\r\n    Integer integer0 = new Integer(828);\r\n    MockDate mockDate0 = new MockDate(1L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \".n{g{<XO?wN#z`Uq\", mockDate0, mockDate0, bigDecimal0, \".n{g{<XO?wN#z`Uq\", 1L, \".n{g{<XO?wN#z`Uq\", bigDecimal0);\r\n    orderData0.setTotal(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    String string0 = orderData0.getSymbol();\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getPrice();\r\n}", "{\r\n    Integer integer0 = new Integer(828);\r\n    MockDate mockDate0 = new MockDate(1L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \".n{g{<XO?wN#z`Uq\", mockDate0, mockDate0, bigDecimal0, \".n{g{<XO?wN#z`Uq\", 1L, \".n{g{<XO?wN#z`Uq\", bigDecimal0);\r\n    orderData0.setOrderID(integer0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, 972);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"7MY<ShSJ'I`r)F o \", mockDate0, mockDate0, bigDecimal0, \"7MY<ShSJ'I`r)F o \", 972, \"7MY<ShSJ'I`r)F o \", bigDecimal0);\r\n    orderData0.setOrderStatus(\"\");\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    orderData0.setSymbol(\"uP;WD3SJ5i|#uwJOb:\");\r\n}", "{\r\n    Integer integer0 = new Integer((-531));\r\n    MockDate mockDate0 = new MockDate((-531), (-531), (-531));\r\n    byte[] byteArray0 = new byte[3];\r\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderData orderData0 = new OrderData(integer0, \"amISP\", mockDate0, mockDate0, bigDecimal0, \"F3lAE/F@>9)?,jD#\", 0.0, \"amISP\");\r\n}", "{\r\n    Integer integer0 = new Integer((-93));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-105));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"bu(?n)5d.\", (-105), \"bu(?n)5d.\", bigDecimal0);\r\n    orderData0.setPrice(bigDecimal0);\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.web.jsf.OrderData", "org.evosuite.runtime.EvoRunnerParameters", "java.util.Date", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "java.math.BigInteger", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage" : {
      "sequences" : [ "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    String string0 = actionMessage0.getDecodedAction();\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.decodedAction = \")}VHuG<nj{MYIwN7}a3\";\r\n    actionMessage0.doDecoding(\"\\t---Log.printCollection -- complete\");\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    actionMessage0.doDecoding(\")@+\");\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.doDecoding(\"\\t---Log.printCollection -- complete\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" : {
      "sequences" : [ "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"<LI>      email:\", \"SLZA\", \"vgC_E:5h[1\", \"<LI>      email:\", \"vgC_E:5h[1\", \"\\n\\t\\t creditCard:\");\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean((String) null, \"$!yBL\\u0001uTe! ^\\\"X}:Xe\", \";Zw7'aMc;\", \"\\n\\tAccount Profile Data for userID:<LI>      email:\\n\\t\\t   passwd:SLZA\\n\\t\\t   fullName:vgC_E:5h[1\\n\\t\\t    address:<LI>      email:\\n\\t\\t      email:$!yBL\\u0001uTe! ^\\\"X}:Xe\\n\\t\\t creditCard:\\n\\t\\t creditCard:\", \"E(PNy,]1` qPp}h\", \"SLZA\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    AccountDataBean accountDataBean0 = accountProfileDataBean0.getAccount();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    boolean boolean0 = accountProfileDataBean0.equals((Object) null);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"<LI>      email:\", \"SLZA\", \"vgC_E:5h[1\", \"<LI>      email:\", \"vgC_E:5h[1\", \"\\n\\t\\t creditCard:\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setUserID(\"\");\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setAccount((AccountDataBean) null);\r\n}", "{\r\n    TradeConfig.setMAX_USERS(3);\r\n    AccountProfileDataBean accountProfileDataBean0 = AccountProfileDataBean.getRandomInstance();\r\n    AccountProfileDataBean accountProfileDataBean1 = AccountProfileDataBean.getRandomInstance();\r\n    boolean boolean0 = accountProfileDataBean1.equals(accountProfileDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.print();\r\n}", "{\r\n    TradeConfig.setMAX_USERS(294);\r\n    AccountProfileDataBean accountProfileDataBean0 = AccountProfileDataBean.getRandomInstance();\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean();\r\n    boolean boolean0 = accountProfileDataBean1.equals(accountProfileDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    String string0 = accountProfileDataBean0.toHTML();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" : {
      "sequences" : [ "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    QuoteDataBean quoteDataBean0 = orderDataBean0.getQuote();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isBuy();\r\n}", "{\r\n    Integer integer0 = new Integer((-597));\r\n    Instant instant0 = MockInstant.ofEpochSecond((-1L), 0L);\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"M\", \"\", date0, date0, 0.0, bigDecimal0, bigDecimal0, \"\");\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate((-57), (-57), 3769, (-57), (-57), (-57));\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"dF=9\", \"dF=9\", mockDate0, mockDate0, (-1694.1719), bigDecimal0, bigDecimal0, (AccountDataBean) null, quoteDataBean0, holdingDataBean0);\r\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\r\n    Clock clock0 = MockClock.tickSeconds(zoneOffset0);\r\n    ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);\r\n    boolean boolean0 = orderDataBean0.equals(thaiBuddhistDate0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    AccountDataBean accountDataBean0 = orderDataBean0.getAccount();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean0 = orderDataBean0.getHolding();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate((-57), (-57), 3769, (-57), (-57), (-57));\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"dF=9\", \"dF=9\", mockDate0, mockDate0, (-1694.1719), bigDecimal0, bigDecimal0, (AccountDataBean) null, quoteDataBean0, holdingDataBean0);\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"!\", \"CC^wn8`[iO\", (-2383.203), bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, (-2383.203));\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"!\", \"!\", (Date) null, (Date) null, 4046.853040057149, bigDecimal0, bigDecimal0, accountDataBean0, quoteDataBean0, holdingDataBean0);\r\n    orderDataBean0.print();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"C8)o,Ya@\", \"C8)o,Ya@\", mockDate0, mockDate0, (-1436.5449), bigDecimal0, bigDecimal0, (AccountDataBean) null, quoteDataBean0, holdingDataBean0);\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean1 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean1);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    OrderDataBean orderDataBean1 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean1);\r\n}", "{\r\n    Integer integer0 = new Integer((-597));\r\n    Instant instant0 = MockInstant.ofEpochSecond((-1L), 0L);\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"M\", \"\", date0, date0, 0.0, bigDecimal0, bigDecimal0, \"\");\r\n    String string0 = orderDataBean0.toHTML();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Date", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "java.time.chrono.ThaiBuddhistDate", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.time.Instant", "org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.mock.java.time.MockClock", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.time.Clock", "java.time.ZoneOffset", "org.evosuite.runtime.mock.java.time.MockInstant", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}