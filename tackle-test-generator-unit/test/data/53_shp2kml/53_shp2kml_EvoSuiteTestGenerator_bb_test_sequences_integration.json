{
  "test_sequences" : {
    "net.sourceforge.shp2kml.GeomConverter" : {
      "sequences" : [ "{\r\n    PrecisionModel precisionModel0 = new PrecisionModel();\r\n    DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory();\r\n    GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0, 4716, defaultCoordinateSequenceFactory0);\r\n    LinearRing linearRing0 = new LinearRing((CoordinateSequence) null, geometryFactory0);\r\n    String string0 = GeomConverter.getPlacemarkKML((Geometry) linearRing0, \"I5? i,6Tr&rc[l-K\", \")%93zTaRf2xN+S2w(\", (-2185.698586769));\r\n}", "{\r\n    Coordinate[] coordinateArray0 = new Coordinate[4];\r\n    PackedCoordinateSequence.Double packedCoordinateSequence_Double0 = new PackedCoordinateSequence.Double(1725, 1736);\r\n    Coordinate coordinate0 = packedCoordinateSequence_Double0.getCoordinate(6);\r\n    coordinateArray0[0] = coordinate0;\r\n    PrecisionModel precisionModel0 = new PrecisionModel(0.0, 6, Double.NaN);\r\n    Coordinate coordinate1 = precisionModel0.toInternal(coordinate0);\r\n    coordinateArray0[1] = coordinate1;\r\n    coordinateArray0[2] = coordinate1;\r\n    coordinateArray0[3] = coordinateArray0[1];\r\n    String string0 = GeomConverter.getLinearRingKML(coordinateArray0);\r\n}", "{\r\n    Coordinate[] coordinateArray0 = new Coordinate[0];\r\n    String string0 = GeomConverter.convertLine(coordinateArray0);\r\n}", "{\r\n    PrecisionModel precisionModel0 = new PrecisionModel(10.0, 9.007199254740992E15, 0.0);\r\n    GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0, 2);\r\n    Coordinate[] coordinateArray0 = new Coordinate[0];\r\n    MultiPoint multiPoint0 = geometryFactory0.createMultiPoint(coordinateArray0);\r\n    String string0 = GeomConverter.getPlacemarkKML((Geometry) multiPoint0);\r\n}", "{\r\n    GeometryFactory geometryFactory0 = new GeometryFactory();\r\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\r\n    Geometry geometry0 = geometryFactory0.buildGeometry(linkedList0);\r\n    String string0 = GeomConverter.getPlacemarkKML(geometry0, \"[\", \"[\", 1.0);\r\n}", "{\r\n    Coordinate[] coordinateArray0 = new Coordinate[5];\r\n    Coordinate coordinate0 = new Coordinate();\r\n    coordinateArray0[3] = coordinate0;\r\n    // Undeclared exception!\r\n    try {\r\n        GeomConverter.convertPolygon(coordinateArray0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"net.sourceforge.shp2kml.GeomConverter\", e);\r\n    }\r\n}", "{\r\n    Coordinate[] coordinateArray0 = new Coordinate[0];\r\n    String string0 = GeomConverter.convertPoint(coordinateArray0);\r\n}", "{\r\n    Coordinate[] coordinateArray0 = new Coordinate[5];\r\n    Coordinate coordinate0 = new Coordinate();\r\n    coordinateArray0[0] = coordinate0;\r\n    coordinateArray0[1] = coordinate0;\r\n    coordinateArray0[2] = coordinateArray0[0];\r\n    coordinateArray0[3] = coordinate0;\r\n    String string0 = GeomConverter.convertPolygon(coordinateArray0);\r\n}", "{\r\n    GeomConverter geomConverter0 = new GeomConverter();\r\n}", "{\r\n    Polygon[] polygonArray0 = new Polygon[9];\r\n    PrecisionModel precisionModel0 = new PrecisionModel(346.6460827441, 346.6460827441, 1.0);\r\n    GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);\r\n    PackedCoordinateSequence.Double packedCoordinateSequence_Double0 = new PackedCoordinateSequence.Double((Coordinate[]) null, 1895);\r\n    LinearRing linearRing0 = geometryFactory0.createLinearRing((CoordinateSequence) packedCoordinateSequence_Double0);\r\n    Polygon polygon0 = new Polygon(linearRing0, precisionModel0, 0);\r\n    polygonArray0[0] = polygon0;\r\n    polygonArray0[1] = polygon0;\r\n    polygonArray0[2] = polygonArray0[0];\r\n    polygonArray0[3] = polygonArray0[0];\r\n    polygonArray0[4] = polygonArray0[2];\r\n    polygonArray0[5] = polygonArray0[0];\r\n    polygonArray0[6] = polygonArray0[5];\r\n    polygonArray0[7] = polygonArray0[0];\r\n    polygonArray0[8] = polygonArray0[4];\r\n    MultiPolygon multiPolygon0 = new MultiPolygon(polygonArray0, geometryFactory0);\r\n    String string0 = GeomConverter.getPlacemarkKML((Geometry) multiPolygon0, \"</Point>\", \"com.vividsolutions.jts.geom.DefaultCoordinateSequence\", 0.0);\r\n}" ],
      "imports" : [ "com.vividsolutions.jts.geom.LinearRing", "com.vividsolutions.jts.geom.Coordinate", "static org.junit.Assert.assertNull", "net.sourceforge.shp2kml.GeomConverter", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.vividsolutions.jts.geom.PrecisionModel", "com.vividsolutions.jts.geom.DefaultCoordinateSequenceFactory", "com.vividsolutions.jts.geom.impl.PackedCoordinateSequence", "com.vividsolutions.jts.geom.MultiPoint", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.vividsolutions.jts.geom.Geometry", "com.vividsolutions.jts.geom.CoordinateSequence", "com.vividsolutions.jts.geom.GeometryFactory", "com.vividsolutions.jts.geom.MultiPolygon", "static org.junit.Assert.assertEquals", "java.util.LinkedList", "com.vividsolutions.jts.geom.Polygon" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "net.sourceforge.shp2kml.Converter" : {
      "sequences" : [ "{\r\n    String[] stringArray0 = new String[0];\r\n    // Undeclared exception!\r\n    try {\r\n        Converter.main(stringArray0);\r\n    } catch (HeadlessException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"java.awt.GraphicsEnvironment\", e);\r\n    }\r\n}", "{\r\n    String[] stringArray0 = new String[4];\r\n    Converter.main(stringArray0);\r\n}", "{\r\n    Converter converter0 = new Converter();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "net.sourceforge.shp2kml.Converter", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "java.awt.HeadlessException", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "net.sourceforge.shp2kml.KMLObject" : {
      "sequences" : [ "{\r\n    KMLObject kMLObject0 = new KMLObject(\"\");\r\n    boolean boolean0 = kMLObject0.FinishWrite();\r\n}", "{\r\n    KMLObject kMLObject0 = new KMLObject(\"\");\r\n    boolean boolean0 = kMLObject0.StartWrite();\r\n}", "{\r\n    KMLObject kMLObject0 = new KMLObject(\"\");\r\n    boolean boolean0 = kMLObject0.addPlacemark(\"\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "net.sourceforge.shp2kml.KMLObject" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}