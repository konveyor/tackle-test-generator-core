{
  "test_sequences" : {
    "com.hf.sfm.util.BasePara" : {
      "sequences" : [ "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[] stringArray0 = new String[2];\r\n    basePara0.setQueryparams(stringArray0);\r\n    String[][] stringArray1 = basePara0.single2plannar();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getSql();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setSqlpath((String) null);\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getQuerySql();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[][] stringArray0 = basePara0.getArr2params();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setPaging(true);\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    boolean boolean0 = basePara0.isPaging();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setSort(\"'~mM\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    int int0 = basePara0.getLimit();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getSort();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    int int0 = basePara0.getStart();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setDir(\"\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setSql(\"\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getOrdersql();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getGroupsql();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[][] stringArray0 = basePara0.single2plannar();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getSqlpath();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setQueryValue(\"\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setLimit(1);\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[] stringArray0 = basePara0.getQueryparams();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[][] stringArray0 = new String[1][3];\r\n    basePara0.setArr2params(stringArray0);\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setGroupsql(\"SG,~JXiZB&j\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setStart((-1));\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getDir();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String[] stringArray0 = new String[5];\r\n    basePara0.setQueryparams(stringArray0);\r\n    String[][] stringArray1 = basePara0.single2plannar();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    String string0 = basePara0.getQueryValue();\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setOrdersql(\"\");\r\n}", "{\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setQuerySql(\"SG,~JXiZB&j\");\r\n}" ],
      "imports" : [ "com.hf.sfm.util.BasePara", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.system.business.Login" : {
      "sequences" : [ "{\r\n    Login login0 = new Login();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null, (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        login0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.HibernateSessionFactory\", e);\r\n    }\r\n}", "{\r\n    Login login0 = new Login();\r\n    login0.destroy();\r\n}", "{\r\n    Login login0 = new Login();\r\n    login0.init();\r\n}" ],
      "imports" : [ "com.hf.sfm.system.business.Login", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.util.ListRange" : {
      "sequences" : [ "{\r\n    ListRange listRange0 = new ListRange();\r\n    listRange0.setTotalSize(0);\r\n}", "{\r\n    ListRange listRange0 = new ListRange();\r\n    int int0 = listRange0.getTotalSize();\r\n}", "{\r\n    ListRange listRange0 = new ListRange();\r\n    ArrayList<Object> arrayList0 = listRange0.getData();\r\n}", "{\r\n    ListRange listRange0 = new ListRange();\r\n    ArrayList<Object> arrayList0 = new ArrayList<Object>();\r\n    listRange0.setData(arrayList0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.hf.sfm.util.ListRange", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.util.ArrayList" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.system.pdo.Menu" : {
      "sequences" : [ "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getOper();\r\n}", "{\r\n    Menu menu0 = new Menu((String) null, (String) null, \"\", \"\", \"\", (String) null, (String) null);\r\n    String string0 = menu0.getUrl();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getParentid();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setImg(\"~Usg=?ZRj,^$B}xP\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setOper(\"\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setIdno(\"HrC}I6r\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getImg();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getSort();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getName();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getStatus();\r\n}", "{\r\n    Menu menu0 = new Menu(\"\", \"com.hf.sfm.system.pdo.Menu\", \"W`p|5\", \"\", \"!#pc\", \"com.hf.sfm.system.pdo.Menu\", \"!#pc\");\r\n    menu0.setName(\"\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    String string0 = menu0.getIdno();\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setStatus(\"\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setUrl(\"Aw9j]ET2%}),A\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setParentid(\"r`MO\");\r\n}", "{\r\n    Menu menu0 = new Menu();\r\n    menu0.setSort(\"\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.hf.sfm.system.pdo.Menu", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.util.Loader" : {
      "sequences" : [ "{\r\n    Loader loader0 = new Loader();\r\n    BasePara basePara0 = new BasePara();\r\n    basePara0.setSqlpath(\"\");\r\n    // Undeclared exception!\r\n    try {\r\n        loader0.run(basePara0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    Query query0 = loader0.getParams((Query) null, (String[][]) null);\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    ListRange listRange0 = loader0.getRange();\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    loader0.setRange((ListRange) null);\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    Class<Object> class0 = Object.class;\r\n    BeanMetaData beanMetaData0 = BeanMetaData.get(class0);\r\n    QName qName0 = QName.get(\"\", \"\");\r\n    DOMElement dOMElement0 = new DOMElement(qName0);\r\n    DOMNamespace dOMNamespace0 = new DOMNamespace(dOMElement0, \"\", \"AE;&\");\r\n    BeanElement beanElement0 = new BeanElement(\"\", dOMNamespace0, \"AE;&\");\r\n    BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);\r\n    loader0.setRs(beanAttributeList0);\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    String[][] stringArray0 = new String[4][7];\r\n    String[] stringArray1 = new String[4];\r\n    stringArray1[0] = \"com.hf.sfm.util.Loader\";\r\n    stringArray0[1] = stringArray1;\r\n    // Undeclared exception!\r\n    try {\r\n        loader0.getParams((Query) null, stringArray0);\r\n    } catch (NullPointerException e) {\r\n    }\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    int int0 = loader0.getTotalCount();\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    String[] stringArray0 = new String[5];\r\n    loader0.setColNames(stringArray0);\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    // Undeclared exception!\r\n    try {\r\n        loader0.collectToMap();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}", "{\r\n    Loader loader0 = new Loader();\r\n    loader0.setTotalCount(0);\r\n}" ],
      "imports" : [ "com.hf.sfm.util.BasePara", "org.dom4j.bean.BeanElement", "static org.junit.Assert.assertNull", "org.dom4j.bean.BeanAttributeList", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "org.dom4j.dom.DOMNamespace", "static org.junit.Assert.*", "org.dom4j.bean.BeanMetaData", "org.evosuite.runtime.EvoRunnerParameters", "com.hf.sfm.util.ListRange", "org.evosuite.runtime.EvoRunner", "org.hibernate.Query", "com.hf.sfm.util.Loader", "org.dom4j.QName", "static org.junit.Assert.assertEquals", "org.dom4j.dom.DOMElement" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.util.DataSource" : {
      "sequences" : [ "{\r\n    String[] stringArray0 = new String[3];\r\n    // Undeclared exception!\r\n    try {\r\n        DataSource.main(stringArray0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}", "{\r\n    DataSource dataSource0 = new DataSource();\r\n    BasePara basePara0 = new BasePara();\r\n    // Undeclared exception!\r\n    try {\r\n        dataSource0.getPlanarArrData(basePara0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}", "{\r\n    DataSource dataSource0 = new DataSource();\r\n    BasePara basePara0 = new BasePara();\r\n    // Undeclared exception!\r\n    try {\r\n        dataSource0.getGridData(basePara0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}", "{\r\n    DataSource dataSource0 = new DataSource();\r\n    FakeHttpSession fakeHttpSession0 = new FakeHttpSession();\r\n    String string0 = dataSource0.getSession(fakeHttpSession0, \"~i-QJTbMm'J~+4;\");\r\n}", "{\r\n    DataSource dataSource0 = new DataSource();\r\n    BasePara basePara0 = new BasePara();\r\n    // Undeclared exception!\r\n    try {\r\n        dataSource0.getComboData(basePara0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.Loader\", e);\r\n    }\r\n}" ],
      "imports" : [ "com.hf.sfm.util.BasePara", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.directwebremoting.util.FakeHttpSession", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.hf.sfm.util.DataSource" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.system.business.MenuManage" : {
      "sequences" : [ "{\r\n    MenuManage menuManage0 = new MenuManage();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.hf.sfm.system.business.MenuManage" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.hf.sfm.util.DaoFactory" : {
      "sequences" : [ "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.rollback();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.DaoFactory\", e);\r\n    }\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.decrypt(\"com.hf.sfm.util.DaoFactory\");\r\n    } catch (IllegalArgumentException e) {\r\n        // \r\n        // String length must be a multiple of four.\r\n        // \r\n        verifyException(\"com.hf.sfm.crypt.Base64\", e);\r\n    }\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    daoFactory0.closeSession();\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.beginTransaction();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.HibernateSessionFactory\", e);\r\n    }\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    daoFactory0.closeAll();\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    Object object0 = new Object();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.update(object0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.DaoFactory\", e);\r\n    }\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.commit();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.DaoFactory\", e);\r\n    }\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    String string0 = daoFactory0.encrypt(\"com.hf.sfm.util.DaoFactory\");\r\n}", "{\r\n    DaoFactory daoFactory0 = new DaoFactory();\r\n    // Undeclared exception!\r\n    try {\r\n        daoFactory0.save(daoFactory0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.hf.sfm.util.DaoFactory\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.hf.sfm.util.DaoFactory" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}