{
  "test_sequences" : {
    "com.densebrain.rif.server.transport.WebServiceContainer" : {
      "sequences" : [ "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance(\"W)uZ\", 2562, \"W)uZ\");\r\n    ArrayList<WebServiceDescriptor> arrayList0 = new ArrayList<WebServiceDescriptor>();\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    boolean boolean0 = arrayList0.add(webServiceDescriptor0);\r\n    webServiceContainer0.descriptorList = (List<WebServiceDescriptor>) arrayList0;\r\n    try {\r\n        webServiceContainer0.restartContainer();\r\n    } catch (RemoteException e) {\r\n        // \r\n        // Unable to add service; nested exception is:\r\n        // \\torg.apache.axis2.AxisFault:  Sorry we don't support methods overloading !!!! ; nested exception is:\r\n        // \\torg.evosuite.runtime.mock.java.lang.MockThrowable:  Sorry we don't support methods overloading !!!!\r\n        // \r\n        verifyException(\"com.densebrain.rif.server.transport.WebServiceContainer\", e);\r\n    }\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance((ConfigurationContext) null);\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance((String) null, 58, \"f6^zC*evA}1p\");\r\n    webServiceContainer0.startContainer();\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance(\"\", 58, \"Error occured while restarting WebServiceContainer\");\r\n    Class<WebServiceDescriptor> class0 = WebServiceDescriptor.class;\r\n    LinkedList<WebServiceDescriptor> linkedList0 = new LinkedList<WebServiceDescriptor>();\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"kU/&c})w\", \"Error occured while restarting WebServiceContainer\");\r\n    boolean boolean0 = linkedList0.offer(webServiceDescriptor0);\r\n    webServiceContainer0.descriptorList = (List<WebServiceDescriptor>) linkedList0;\r\n    webServiceContainer0.configureService(class0, \"\", \"YLs\\\"]r\");\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance((String) null, (-2062), (String) null);\r\n    WebServiceContainer webServiceContainer1 = webServiceContainer0.restartContainer();\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = new WebServiceContainer((ConfigurationContext) null);\r\n    EndpointReference endpointReference0 = webServiceContainer0.getEPRForService((String) null, (String) null);\r\n}", "{\r\n    WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance(\"\", 58, \"Error occured while restarting WebServiceContainer\");\r\n    Class<WebServiceDescriptor> class0 = WebServiceDescriptor.class;\r\n    webServiceContainer0.configureService(class0, \"\", \"YLs\\\"]r\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.apache.axis2.context.ConfigurationContext", "com.densebrain.rif.server.transport.WebServiceContainer", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "org.apache.axis2.addressing.EndpointReference", "java.rmi.RemoteException", "java.util.ArrayList", "java.util.List", "org.evosuite.runtime.EvoRunnerParameters", "com.densebrain.rif.server.transport.WebServiceDescriptor", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "java.util.LinkedList" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.RIFManagerFactory" : {
      "sequences" : [ "{\r\n    RIFManagerFactory rIFManagerFactory0 = RIFManagerFactory.getInstance();\r\n    Class<Object> class0 = Object.class;\r\n    try {\r\n        rIFManagerFactory0.getImpl(\"g C*K\", class0);\r\n    } catch (RemoteException e) {\r\n        // \r\n        // Interface class must be an interface\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.RIFInvoker\", e);\r\n    }\r\n}" ],
      "imports" : [ "com.densebrain.rif.client.RIFManagerFactory", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.rmi.RemoteException" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.service.types.InvokeResponse" : {
      "sequences" : [ "{\r\n    InvokeResponse invokeResponse0 = new InvokeResponse();\r\n    String string0 = invokeResponse0.get_return();\r\n}", "{\r\n    InvokeResponse invokeResponse0 = new InvokeResponse();\r\n    invokeResponse0.set_return(\"\");\r\n    XMLStreamReader xMLStreamReader0 = invokeResponse0.getPullParser(invokeResponse0.MY_QNAME);\r\n    try {\r\n        InvokeResponse.Factory.parse(xMLStreamReader0);\r\n    } catch (Exception e) {\r\n        // \r\n        // javax.xml.stream.XMLStreamException\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.service.types.InvokeResponse$Factory\", e);\r\n    }\r\n}", "{\r\n    InvokeResponse invokeResponse0 = new InvokeResponse();\r\n    invokeResponse0.set_return(\"X\");\r\n    XMLStreamReader xMLStreamReader0 = invokeResponse0.getPullParser(invokeResponse0.MY_QNAME);\r\n    StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(xMLStreamReader0);\r\n    int int0 = streamReaderDelegate0.next();\r\n    try {\r\n        InvokeResponse.Factory.parse(streamReaderDelegate0);\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // Unexpected subelement return\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.service.types.InvokeResponse$Factory\", e);\r\n    }\r\n}", "{\r\n    InvokeResponse.Factory invokeResponse_Factory0 = new InvokeResponse.Factory();\r\n}" ],
      "imports" : [ "javax.xml.stream.util.StreamReaderDelegate", "com.densebrain.rif.client.service.types.InvokeResponse", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "javax.xml.stream.XMLStreamReader", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.RIFClassLoader" : {
      "sequences" : [ "{\r\n    RIFClassLoader rIFClassLoader0 = new RIFClassLoader();\r\n    Class<?> class0 = rIFClassLoader0.findClass(\"VI{)_YC\");\r\n}", "{\r\n    RIFClassLoader rIFClassLoader0 = new RIFClassLoader();\r\n    byte[] byteArray0 = new byte[1];\r\n    // Undeclared exception!\r\n    try {\r\n        rIFClassLoader0.registerClass(\"MC'PI7/Yy\\\"P;Y\", byteArray0);\r\n    } catch (NoClassDefFoundError e) {\r\n    }\r\n}" ],
      "imports" : [ "com.densebrain.rif.client.RIFClassLoader", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.RIFManager" : {
      "sequences" : [ "{\r\n    RIFManager rIFManager0 = new RIFManager(\"}~M6t(\");\r\n    Class<String> class0 = String.class;\r\n    try {\r\n        rIFManager0.getInvoker(class0);\r\n    } catch (RemoteException e) {\r\n        // \r\n        // Interface class must be an interface\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.RIFInvoker\", e);\r\n    }\r\n}", "{\r\n    RIFManager rIFManager0 = new RIFManager(\"CQN!|E%[3\");\r\n    RIFService rIFService0 = rIFManager0.getService();\r\n}", "{\r\n    RIFManager rIFManager0 = new RIFManager(\"}~M6t(\");\r\n    RIFClassLoader rIFClassLoader0 = rIFManager0.getClassLoader();\r\n}" ],
      "imports" : [ "com.densebrain.rif.client.RIFClassLoader", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.densebrain.rif.client.service.RIFService", "org.evosuite.runtime.EvoRunner", "com.densebrain.rif.client.RIFManager", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.rmi.RemoteException" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.service.types.Invoke" : {
      "sequences" : [ "{\r\n    Invoke invoke0 = new Invoke();\r\n    String string0 = invoke0.getClassName();\r\n}", "{\r\n    Invoke invoke0 = new Invoke();\r\n    String string0 = invoke0.getMethodName();\r\n}", "{\r\n    Invoke invoke0 = new Invoke();\r\n    String string0 = invoke0.getSerializedParams();\r\n}", "{\r\n    Invoke invoke0 = new Invoke();\r\n    invoke0.localClassName = \"t2jqLdK'%:A\";\r\n    invoke0.setSerializedParams(\"t2jqLdK'%:A\");\r\n    invoke0.setMethodName(\"t2jqLdK'%:A\");\r\n    XMLStreamReader xMLStreamReader0 = invoke0.getPullParser(invoke0.MY_QNAME);\r\n    StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(xMLStreamReader0);\r\n    int int0 = streamReaderDelegate0.next();\r\n    try {\r\n        Invoke.Factory.parse(xMLStreamReader0);\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // Unexpected subelement className\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.service.types.Invoke$Factory\", e);\r\n    }\r\n}", "{\r\n    Invoke.Factory invoke_Factory0 = new Invoke.Factory();\r\n}", "{\r\n    Invoke invoke0 = new Invoke();\r\n    invoke0.setClassName(\"h4fNVv.}l\");\r\n    invoke0.setSerializedParams(\"ns1\");\r\n    invoke0.setMethodName(\"className\");\r\n    XMLStreamReader xMLStreamReader0 = invoke0.getPullParser((QName) null);\r\n    try {\r\n        Invoke.Factory.parse(xMLStreamReader0);\r\n    } catch (Exception e) {\r\n        // \r\n        // javax.xml.stream.XMLStreamException\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.service.types.Invoke$Factory\", e);\r\n    }\r\n}" ],
      "imports" : [ "javax.xml.stream.util.StreamReaderDelegate", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "javax.xml.stream.XMLStreamReader", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.xml.namespace.QName", "static org.junit.Assert.assertEquals", "com.densebrain.rif.client.service.types.Invoke" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.util.ObjectUtility" : {
      "sequences" : [ "{\r\n    try {\r\n        ObjectUtility.deserializeObjectBase64Encoded(\"\");\r\n    } catch (EOFException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"java.io.ObjectInputStream$PeekInputStream\", e);\r\n    }\r\n}", "{\r\n    byte[] byteArray0 = ObjectUtility.serializeObject(\"`_h:GN#6-\");\r\n    Object object0 = ObjectUtility.deserializeObject(byteArray0);\r\n}", "{\r\n    byte[] byteArray0 = ObjectUtility.serializeObject(\"`_h:GN#6-\");\r\n    String string0 = ObjectUtility.encodeBytes(byteArray0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.io.EOFException", "com.densebrain.rif.util.ObjectUtility" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.server.RIFImplementationManager" : {
      "sequences" : [ "{\r\n    RIFImplementationManager rIFImplementationManager0 = RIFImplementationManager.getInstance();\r\n    Object[] objectArray0 = new Object[5];\r\n    try {\r\n        rIFImplementationManager0.invoke(\"\", \"\", objectArray0);\r\n    } catch (RemoteException e) {\r\n        // \r\n        // Not registered:\r\n        // \r\n        verifyException(\"com.densebrain.rif.server.RIFImplementationManager\", e);\r\n    }\r\n}", "{\r\n    RIFImplementationManager rIFImplementationManager0 = RIFImplementationManager.getInstance();\r\n    Class<Object> class0 = Object.class;\r\n    rIFImplementationManager0.registerImplementation(class0, rIFImplementationManager0);\r\n}" ],
      "imports" : [ "com.densebrain.rif.server.RIFImplementationManager", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.rmi.RemoteException" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.server.RIFService" : {
      "sequences" : [ "{\r\n    RIFService rIFService0 = new RIFService();\r\n    try {\r\n        rIFService0.invoke(\"\", \"\", \"|KRa)L\");\r\n    } catch (RemoteException e) {\r\n        // \r\n        // Unable to deserialize parameters: null; nested exception is:\r\n        // \\tjava.io.EOFException\r\n        // \r\n        verifyException(\"com.densebrain.rif.server.RIFService\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.densebrain.rif.server.RIFService", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "java.rmi.RemoteException" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.RIFInvoker" : {
      "sequences" : [ "{\r\n    RIFManager rIFManager0 = new RIFManager(\"\");\r\n    RIFInvoker<String> rIFInvoker0 = null;\r\n    try {\r\n        rIFInvoker0 = new RIFInvoker<String>(rIFManager0, (Class) null);\r\n    } catch (Throwable e) {\r\n        // \r\n        // Interface class can not be null\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.RIFInvoker\", e);\r\n    }\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    RIFInvoker<Integer> rIFInvoker0 = null;\r\n    try {\r\n        rIFInvoker0 = new RIFInvoker<Integer>((RIFManager) null, class0);\r\n    } catch (Throwable e) {\r\n        // \r\n        // Interface class must be an interface\r\n        // \r\n        verifyException(\"com.densebrain.rif.client.RIFInvoker\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.densebrain.rif.client.RIFInvoker", "com.densebrain.rif.client.RIFManager", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.server.transport.WebServiceDescriptor" : {
      "sequences" : [ "{\r\n    Class<String> class0 = String.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, (String) null, \"\");\r\n    boolean boolean0 = webServiceDescriptor0.equals((Object) null);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor((Class) null, (String) null, (String) null);\r\n    WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor(class0, \"IRz #dF55I*dG^UF\", \"IRz #dF55I*dG^UF\");\r\n    boolean boolean0 = webServiceDescriptor0.equals(webServiceDescriptor1);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor(webServiceDescriptor0.serviceClazz, \"\", \"\");\r\n    boolean boolean0 = webServiceDescriptor0.equals(webServiceDescriptor1);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    Class class1 = webServiceDescriptor0.getServiceClazz();\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    webServiceDescriptor0.setTypesNamespace(\"\");\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor((Class) null, (String) null, (String) null);\r\n    WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor(class0, \"IRz #dF55I*dG^UF\", \"IRz #dF55I*dG^UF\");\r\n    webServiceDescriptor1.setServiceClazz((Class) null);\r\n    boolean boolean0 = webServiceDescriptor0.equals(webServiceDescriptor1);\r\n}", "{\r\n    Class<String> class0 = String.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, (String) null, \"s\\\"M?~_\");\r\n    boolean boolean0 = webServiceDescriptor0.equals(webServiceDescriptor0);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    String string0 = webServiceDescriptor0.getTargetNamespace();\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    String string0 = webServiceDescriptor0.getTypesNamespace();\r\n}", "{\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor((Class) null, (String) null, (String) null);\r\n    int int0 = webServiceDescriptor0.hashCode();\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    int int0 = webServiceDescriptor0.hashCode();\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"I9z #dF55IdgZU\", \"I9z #dF55IdgZU\");\r\n    WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor((Class) null, \"I9z #dF55IdgZU\", \"I9z #dF55IdgZU\");\r\n    boolean boolean0 = webServiceDescriptor0.equals(webServiceDescriptor1);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    Class<Integer> class1 = Integer.class;\r\n    boolean boolean0 = webServiceDescriptor0.equals(class1);\r\n}", "{\r\n    Class<Object> class0 = Object.class;\r\n    WebServiceDescriptor webServiceDescriptor0 = new WebServiceDescriptor(class0, \"\", \"\");\r\n    webServiceDescriptor0.setTargetNamespace(\"\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.densebrain.rif.server.transport.WebServiceDescriptor", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.client.service.RIFServiceStub" : {
      "sequences" : [ "{\r\n    RIFServiceStub rIFServiceStub0 = new RIFServiceStub();\r\n    AxisOperation[] axisOperationArray0 = new AxisOperation[2];\r\n    QName qName0 = SOAPMessageBodyBasedDispatcher.NAME;\r\n    OutOnlyAxisOperation outOnlyAxisOperation0 = new OutOnlyAxisOperation(qName0);\r\n    axisOperationArray0[0] = (AxisOperation) outOnlyAxisOperation0;\r\n    RIFServiceStub._operations = axisOperationArray0;\r\n    Invoke invoke0 = new Invoke();\r\n    try {\r\n        rIFServiceStub0.invoke(invoke0);\r\n    } catch (AxisFault e) {\r\n        // \r\n        // Operation  SOAPMessageBodyBasedDispatcher not found\r\n        // \r\n        verifyException(\"org.apache.axis2.client.ServiceClient\", e);\r\n    }\r\n}", "{\r\n    RIFServiceStub rIFServiceStub0 = new RIFServiceStub();\r\n    Invoke invoke0 = new Invoke();\r\n    // Undeclared exception!\r\n    try {\r\n        rIFServiceStub0.invoke(invoke0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.evosuite.runtime.System\", e);\r\n    }\r\n}", "{\r\n    RIFServiceStub rIFServiceStub0 = new RIFServiceStub();\r\n    // Undeclared exception!\r\n    try {\r\n        rIFServiceStub0.invoke((Invoke) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.apache.axis2.context.MessageContext\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.apache.axis2.engine.SOAPMessageBodyBasedDispatcher", "javax.xml.namespace.QName", "org.apache.axis2.AxisFault", "static org.junit.Assert.assertEquals", "org.apache.axis2.description.AxisOperation", "com.densebrain.rif.client.service.RIFServiceStub", "com.densebrain.rif.client.service.types.Invoke", "org.apache.axis2.description.OutOnlyAxisOperation" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.densebrain.rif.server.RIFServer" : {
      "sequences" : [ "{\r\n    RIFServer rIFServer0 = new RIFServer(92);\r\n    rIFServer0.stop();\r\n}", "{\r\n    RIFServer rIFServer0 = new RIFServer(92);\r\n    rIFServer0.start();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.densebrain.rif.server.RIFServer" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}