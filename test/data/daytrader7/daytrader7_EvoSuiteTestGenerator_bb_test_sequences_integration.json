{
  "test_sequences" : {
    "com.ibm.websphere.samples.daytrader.web.prims.PingBean" : {
      "sequences" : [ "{\r\n    PingBean pingBean0 = new PingBean();\r\n    String string0 = pingBean0.getMsg();\r\n}", "{\r\n    PingBean pingBean0 = new PingBean();\r\n    pingBean0.setMsg(\"ZS\");\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.prims.PingBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean" : {
      "sequences" : [ "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOpenOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeUserCount((-1161));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setBuyOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    String string0 = runStatsDataBean0.toString();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLoginCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    int int0 = runStatsDataBean0.getTradeStockCount();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSellOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setNewUserCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeStockCount(548);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setHoldingCount(946);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLogoutCount((-668));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setDeletedOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setCancelledOrderCount(3767);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean" : {
      "sequences" : [ "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean0);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-2163L));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean1 = new HoldingDataBean(0.0, bigDecimal0, (Date) null, accountDataBean0, quoteDataBean0);\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean1);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    BigDecimal bigDecimal0 = new BigDecimal((-2163L));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean1 = new HoldingDataBean(0.0, bigDecimal0, (Date) null, accountDataBean0, quoteDataBean0);\r\n    boolean boolean0 = holdingDataBean1.equals(holdingDataBean0);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    AccountDataBean accountDataBean0 = holdingDataBean0.getAccount();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    QuoteDataBean quoteDataBean0 = holdingDataBean0.getQuote();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    Integer integer0 = new Integer(751);\r\n    holdingDataBean0.setHoldingID(integer0);\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(0.0, bigDecimal0, (Date) null, (AccountDataBean) null, (QuoteDataBean) null);\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    boolean boolean0 = holdingDataBean0.equals((Object) null);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    String string0 = holdingDataBean0.toHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-3791));\r\n    MockDate mockDate0 = new MockDate(3393, 3393, (-1033), (-1033), 3393);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"\");\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(2283.1475, bigDecimal0, mockDate0, accountDataBean0, quoteDataBean0);\r\n    holdingDataBean0.print();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Date", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeBuildDB" : {
      "sequences" : [ "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\r\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\r\n    try {\r\n        tradeBuildDB0.parseDDLToBuffer(mockFileInputStream0);\r\n    } catch (IOException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.evosuite.runtime.mock.java.io.NativeMockedIO\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    TradeConfig.setMAX_HOLDINGS(0);\r\n    MockFileInputStream mockFileInputStream0 = null;\r\n    try {\r\n        mockFileInputStream0 = new MockFileInputStream(\"B^*62NRAk@O*sKL\");\r\n    } catch (Throwable e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockFileInputStream\", e);\r\n    }\r\n}", "{\r\n    String[] stringArray0 = new String[2];\r\n    stringArray0[0] = \" last:\";\r\n    stringArray0[1] = \"c\";\r\n    TradeBuildDB.main(stringArray0);\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\r\n    doReturn(false, false).when(enumeration0).hasMoreElements();\r\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1284.10115455));\r\n    TradeConfig.MAXIMUM_STOCK_PRICE = bigDecimal0;\r\n    byte[] byteArray0 = new byte[1];\r\n    byteArray0[0] = (byte) 0;\r\n    int int0 = sequenceInputStream0.read(byteArray0);\r\n    int int1 = sequenceInputStream0.read();\r\n    sequenceInputStream0.mark(0);\r\n    TradeConfig.setMAX_USERS(59);\r\n    int int2 = sequenceInputStream0.available();\r\n    Object[] objectArray0 = tradeBuildDB0.parseDDLToBuffer(sequenceInputStream0);\r\n    try {\r\n        TradeBuildDB.main(stringArray0);\r\n    } catch (NoSuchElementException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"java.util.LinkedList\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);\r\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);\r\n    try {\r\n        tradeBuildDB0.parseDDLToBuffer(bufferedInputStream0);\r\n    } catch (IOException e) {\r\n        // \r\n        // Stream closed\r\n        // \r\n        verifyException(\"java.io.PushbackInputStream\", e);\r\n    }\r\n}", "{\r\n    TradeBuildDB tradeBuildDB0 = new TradeBuildDB();\r\n    String[] stringArray0 = new String[9];\r\n    stringArray0[0] = \"\";\r\n    stringArray0[1] = \"wFVg]_RWs7P`R\";\r\n    stringArray0[2] = \"\";\r\n    stringArray0[3] = \"TradeBuildDB:parseDDLToBuffer - \";\r\n    stringArray0[4] = \"M?$!o/-\";\r\n    stringArray0[5] = \";Xpn<&V\";\r\n    stringArray0[6] = \"TradeBuildDB: Unable to parse DDL file\";\r\n    stringArray0[7] = \"\";\r\n    stringArray0[8] = \"W7%s~/%]}?2m-l65\";\r\n    TradeBuildDB.main(stringArray0);\r\n}", "{\r\n    String string0 = \"\";\r\n    String string1 = null;\r\n    MockPrintWriter mockPrintWriter0 = null;\r\n    try {\r\n        mockPrintWriter0 = new MockPrintWriter(\"\", (String) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // charsetName\r\n        // \r\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockPrintWriter\", e);\r\n    }\r\n}", "{\r\n    String string0 = \"C=}zhwWx\\\"\";\r\n    String string1 = \"%0TUbAw..zU'YU\";\r\n    File file0 = MockFile.createTempFile(\"C=}zhwWx\\\"\", \"%0TUbAw..zU'YU\");\r\n    MockPrintWriter mockPrintWriter0 = null;\r\n    try {\r\n        mockPrintWriter0 = new MockPrintWriter(file0, \"%0TUbAw..zU'YU\");\r\n    } catch (Throwable e) {\r\n        // \r\n        // %0TUbAw..zU'YU\r\n        // \r\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockPrintWriter\", e);\r\n    }\r\n}" ],
      "imports" : [ "java.io.DataInputStream", "java.io.BufferedInputStream", "static org.junit.Assert.assertNull", "java.util.Enumeration", "java.io.PushbackInputStream", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "java.math.BigDecimal", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "java.util.NoSuchElementException", "org.evosuite.runtime.mock.java.io.MockFile", "org.evosuite.runtime.mock.java.io.MockFileInputStream", "java.io.SequenceInputStream", "com.ibm.websphere.samples.daytrader.web.TradeBuildDB", "org.junit.Test", "java.io.IOException", "static org.junit.Assert.*", "java.io.File", "org.evosuite.runtime.mock.java.io.MockPrintWriter", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "java.io.FileDescriptor", "org.evosuite.runtime.ViolatedAssumptionAnswer", "java.io.InputStream" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TradeConfig" : {
      "sequences" : [ "{\r\n    Random.setNextRandom((-1347));\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"maxquotes\", \"maxquotes\");\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_QUOTES();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"uid:1\", (String) null);\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getRunTimeModeNames();\r\n}", "{\r\n    String string0 = TradeConfig.rndFullName();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getPublishQuotePriceChange();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();\r\n}", "{\r\n    TradeConfig.RND_USER = false;\r\n    String string0 = TradeConfig.getUserID();\r\n}", "{\r\n    TradeConfig.setMAX_USERS(0);\r\n    // Undeclared exception!\r\n    try {\r\n        TradeConfig.getUserID();\r\n    } catch (IndexOutOfBoundsException e) {\r\n        // \r\n        // Index: 0, Size: 0\r\n        // \r\n        verifyException(\"java.util.ArrayList\", e);\r\n    }\r\n}", "{\r\n    // Undeclared exception!\r\n    try {\r\n        TradeConfig.getPage(1098);\r\n    } catch (ArrayIndexOutOfBoundsException e) {\r\n        // \r\n        // 1098\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.TradeConfig\", e);\r\n    }\r\n}", "{\r\n    TradeConfig.setConfigParam(\"\\t---Log.printCollection -- complete\", \"uid:0\");\r\n}", "{\r\n    TradeConfig.setRunTimeMode(1377);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"runtimemode\", \"\");\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getActionTrace();\r\n}", "{\r\n    int int0 = TradeConfig.getMarketSummaryInterval();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getLongRun();\r\n}", "{\r\n    float float0 = TradeConfig.rndPrice();\r\n}", "{\r\n    TradeConfig.incrementSellDeficit();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"primiterations\", \"(L(8!@\");\r\n}", "{\r\n    TradeConfig.setLongRun(true);\r\n}", "{\r\n    String string0 = TradeConfig.rndCreditCard();\r\n    String string1 = TradeConfig.rndSymbols();\r\n}", "{\r\n    TradeConfig.setJDBCDriverNeedsGlobalTransation(true);\r\n}", "{\r\n    TradeConfig.setMAX_USERS(1);\r\n    String string0 = TradeConfig.nextUserID();\r\n}", "{\r\n    int int0 = TradeConfig.getAccessMode();\r\n}", "{\r\n    String string0 = TradeConfig.rndAddress();\r\n}", "{\r\n    int int0 = TradeConfig.getOrderProcessingMode();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"maxUsers\", \"maxUsers\");\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_HOLDINGS();\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    TradeConfig.setMAX_USERS(20);\r\n    String string0 = TradeConfig.rndUserID();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"\\t\", \"ku6505%? %tV=$h*GMO\");\r\n}", "{\r\n    TradeConfig.setAccessMode(2);\r\n}", "{\r\n    TradeConfig.setUseRemoteEJBInterface(true);\r\n}", "{\r\n    TradeConfig.setPercentSentToWebsocket(2144);\r\n}", "{\r\n    float float0 = TradeConfig.rndQuantity();\r\n}", "{\r\n    String string0 = TradeConfig.rndNewUserID();\r\n    String string1 = TradeConfig.rndNewUserID();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"accessmode\", \"z_i`ine+\");\r\n}", "{\r\n    String string0 = TradeConfig.rndSymbol();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal((-1597));\r\n}", "{\r\n    TradeConfig.setPublishQuotePriceChange(true);\r\n}", "{\r\n    TradeConfig.setMAX_QUOTES(176);\r\n}", "{\r\n    TradeConfig.setPrimIterations((-1597));\r\n}", "{\r\n    TradeConfig.setMAX_USERS(8);\r\n    String string0 = TradeConfig.rndUserID();\r\n    String string1 = TradeConfig.rndUserID();\r\n}", "{\r\n    TradeConfig.setMarketSummaryInterval((-477));\r\n}", "{\r\n    String string0 = TradeConfig.rndEmail(\"first:300 last:2000\");\r\n}", "{\r\n    TradeConfig tradeConfig0 = new TradeConfig();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getUpdateQuotePrices();\r\n}", "{\r\n    TradeConfig.setOrderProcessingMode(1);\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getWebInterfaceNames();\r\n}", "{\r\n    TradeConfig.setUpdateQuotePrices(false);\r\n}", "{\r\n    TradeConfig.setScenarioCount(113);\r\n}", "{\r\n    TradeConfig.setDisplayOrderAlerts(true);\r\n}", "{\r\n    int int0 = TradeConfig.getWebInterface();\r\n}", "{\r\n    TradeConfig.setConfigParam((String) null, \"TradeConfig.setConfigParm(..): minor exception caughtSetting maxusers, error parsing string to int:\");\r\n}", "{\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    int int0 = TradeConfig.getPercentSentToWebsocket();\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();\r\n    TradeConfig.setRunTimeModeNames(stringArray0);\r\n}", "{\r\n    int[][] intArray0 = TradeConfig.getScenarioMixes();\r\n}", "{\r\n    TradeConfig.setMAX_HOLDINGS(0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n}", "{\r\n    String string0 = TradeConfig.rndBalance();\r\n}", "{\r\n    char char0 = TradeConfig.getScenarioAction(true);\r\n}", "{\r\n    int int0 = TradeConfig.getRunTimeMode();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"1000000\");\r\n}", "{\r\n    TradeConfig.setActionTrace(true);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.rndBoolean();\r\n}", "{\r\n    int int0 = TradeConfig.getPrimIterations();\r\n}", "{\r\n    TradeConfig.setWebInterface(2);\r\n}", "{\r\n    int int0 = TradeConfig.getScenarioCount();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"BUY\");\r\n}", "{\r\n    TradeConfig.setConfigParam(\"webinterface\", \"G\");\r\n}", "{\r\n    boolean boolean0 = TradeConfig.useRemoteEJBInterface();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getDisplayOrderAlerts();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.Random", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountDataBean" : {
      "sequences" : [ "{\r\n    Integer integer0 = Integer.getInteger(\"\", 0);\r\n    MockDate mockDate0 = new MockDate(105, 3728, 3728, 0, 0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(3728);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"/m\");\r\n    accountDataBean0.setOrders((Collection<OrderDataBean>) null);\r\n}", "{\r\n    TradeConfig.setMAX_USERS(128);\r\n    AccountDataBean accountDataBean0 = AccountDataBean.getRandomInstance();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\">|y_\", \">|y_\", \">|y_\", \">|y_\", \">|y_\", \">|y_\");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    accountDataBean0.login(\">|y_\");\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\">|y_\", \">|y_\", \">|y_\", \">|y_\", \">|y_\", \">|y_\");\r\n    accountProfileDataBean0.setPassword(\"\\n\\t\\t         low: \");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login(\">|y_\");\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: null\r\n        // \\tIncorrect password-->>|y_:\r\n        // \\t\\t         low:\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 0, (-523), (-523), 1038, (-523));\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"_l:2N\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-3134), (-3134), 80, (-3134), (-3134));\r\n    BigDecimal bigDecimal0 = new BigDecimal(2615.6341060007);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, Integer.MAX_VALUE, (-3134), mockDate0, mockDate0, bigDecimal0, bigDecimal0, (String) null);\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    LinkedHashSet<HoldingDataBean> linkedHashSet0 = new LinkedHashSet<HoldingDataBean>();\r\n    accountDataBean0.setHoldings(linkedHashSet0);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 0, (-523), (-523), 1038, (-523));\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"_l:2N\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean();\r\n    Integer integer0 = new Integer(0);\r\n    accountDataBean0.setAccountID(integer0);\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    String string0 = accountDataBean0.toHTML();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-3134), (-3134), 80, (-3134), (-3134));\r\n    BigDecimal bigDecimal0 = new BigDecimal(2615.6341060007);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, Integer.MAX_VALUE, (-3134), mockDate0, mockDate0, bigDecimal0, bigDecimal0, (String) null);\r\n    boolean boolean0 = accountDataBean0.equals((Object) null);\r\n}", "{\r\n    Integer integer0 = Integer.getInteger(\"\", 0);\r\n    MockDate mockDate0 = new MockDate(105, 3728, 3728, 0, 0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(3728);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"/m\");\r\n    Collection<HoldingDataBean> collection0 = accountDataBean0.getHoldings();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 20, 0, 0, 20, 0);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 20, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"_l:2N\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean();\r\n    Integer integer0 = new Integer(20);\r\n    accountDataBean1.setAccountID(integer0);\r\n    Integer integer1 = new Integer(20);\r\n    accountDataBean0.setAccountID(integer1);\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 0, (-523), (-523), 1038, (-523));\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"_l:2N\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean();\r\n    Integer integer0 = new Integer(0);\r\n    accountDataBean1.setAccountID(integer0);\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login(\">|y_\");\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: nullnull AccountProfile\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    accountDataBean0.print();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    accountDataBean0.logout();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 10000, 1297, 0, 0, 777);\r\n    BigDecimal bigDecimal0 = new BigDecimal(777);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(1297, 1297, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \">|y_\");\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    Collection<OrderDataBean> collection0 = accountDataBean0.getOrders();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.ejb.EJBException", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "java.util.LinkedHashSet", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData" : {
      "sequences" : [ "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setHigh(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setGainPercent(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    double double1 = quoteData0.getVolume();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setCompanyName(\"K(%N\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"ne,jktU%;7\");\r\n    quoteData0.setChange((-1.0));\r\n    String string0 = quoteData0.getChangeHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(0.0);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"%</FONT></B>)<IMG src=\\\"images/\", bigDecimal0, bigDecimal0, \"R\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getHigh();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    String string0 = quoteData0.getChangeHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setOpen(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setRange(\"<FONT color=\\\"#009900\\\">1.00</FONT><IMG src=\\\"images/arrowup.gif\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(913.1873129);\r\n    Double double0 = new Double(913.1873129);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<A href=\\\"app?action=quotes&symbols=\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    String string0 = quoteData0.getCompanyName();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setGain(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1518L);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#009900\\\">\");\r\n    quoteData0.setPrice(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1518L);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<FONT color=\\\"#009900\\\">\");\r\n    quoteData0.setSymbol(\"<FONT color=\\\"#009900\\\">\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    BigDecimal bigDecimal1 = quoteData0.getOpen();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    // Undeclared exception!\r\n    try {\r\n        quoteData0.getGainPercentHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getGainPercent();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(913.1873129);\r\n    Double double0 = new Double(913.1873129);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<A href=\\\"app?action=quotes&symbols=\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getGain();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    double double1 = quoteData0.getChange();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1091L));\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"Ih(HMky2U|sHAdHHj^%\", bigDecimal0, bigDecimal0, \"<s4)b.`b,W\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getPrice();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setLow(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    String string0 = quoteData0.getGainHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1091L));\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"Ih(HMky2U|sHAdHHj^%\", bigDecimal0, bigDecimal0, \"<s4)b.`b,W\", double0, double0);\r\n    String string0 = quoteData0.getSymbol();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    BigDecimal bigDecimal1 = quoteData0.getLow();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    String string0 = quoteData0.getRange();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"ne,jktU%;7\");\r\n    quoteData0.setVolume((-1.0));\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" : {
      "sequences" : [ "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    quoteDataBean0.print();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean1 = QuoteDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean2 = QuoteDataBean.getRandomInstance();\r\n    Random.setNextRandom(1066);\r\n    QuoteDataBean quoteDataBean3 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean2.equals(quoteDataBean3);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean0);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    QuoteDataBean quoteDataBean1 = new QuoteDataBean(\"<LI> companyName: \");\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean1 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"5fw8ZMk@p5Jw\");\r\n    boolean boolean0 = quoteDataBean0.equals(\"5fw8ZMk@p5Jw\");\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"HAN-ppFn4Y\");\r\n    String string0 = quoteDataBean0.toHTML();\r\n}" ],
      "imports" : [ "org.evosuite.runtime.Random", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.direct.TradeDirect" : {
      "sequences" : [ "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.getQuote(\",4Z\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(\"\");\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(\"\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getOrders((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(10000);\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer(0);\r\n    OrderDataBean orderDataBean0 = tradeDirect0.sell(\"g#=$4\", integer0, 0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    File file0 = MockFile.createTempFile(\"3QY].dB'e-RQd/\", \"3QY].dB'e-RQd/\");\r\n    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);\r\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);\r\n    boolean boolean0 = tradeDirect0.recreateDBTables((Object[]) null, mockPrintWriter0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    try {\r\n        tradeDirect0.login(\"<LI>      change1: \", \"]._l1\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.register(\"1-e||Ca>~Cj\", \"TradeDirect:login -- error logging in user\", \"TradeDirect:login -- error logging in user\", \"TradeDirect:login -- error logging in user\", \"1-e||Ca>~Cj\", \"1-e||Ca>~Cj\", (BigDecimal) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer((-448));\r\n    try {\r\n        tradeDirect0.completeOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeDirect.init();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Object[] objectArray0 = new Object[5];\r\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\"g#=$4\");\r\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);\r\n    boolean boolean0 = tradeDirect0.recreateDBTables(objectArray0, mockPrintWriter0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(0);\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    try {\r\n        tradeDirect0.resetTrade(true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    Integer integer0 = new Integer(40);\r\n    try {\r\n        tradeDirect0.queueOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    tradeDirect0.logout(\",nPK=Q)7Dq&x\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getClosedOrders((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer((-1648));\r\n    HoldingDataBean holdingDataBean0 = tradeDirect0.getHolding(integer0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    TradeConfig.setTrace(true);\r\n    try {\r\n        tradeDirect0.resetTrade(true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    BigDecimal bigDecimal0 = new BigDecimal(2251L);\r\n    try {\r\n        tradeDirect0.updateQuotePriceVolume(\"\", bigDecimal0, 1.0E9);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(1575);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer((-314));\r\n    TradeConfig.setTrace(true);\r\n    try {\r\n        tradeDirect0.getHolding(integer0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    MarketSummaryDataBean marketSummaryDataBean0 = tradeDirect0.getMarketSummary();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getClosedOrders((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<HoldingDataBean> collection0 = tradeDirect0.getHoldings(\"<LI> creationDate:\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"\", \"\", \"\", \"\", \"<LI> completionDate: \", \"5BOLaIPf{jbN=\");\r\n    AccountProfileDataBean accountProfileDataBean1 = tradeDirect0.updateAccountProfile(accountProfileDataBean0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer((-1648));\r\n    OrderDataBean orderDataBean0 = tradeDirect0.completeOrder(integer0, true);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.orderCompleted(\"\", (Integer) null);\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // TradeDirect:orderCompleted method not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    try {\r\n        tradeDirect0.sell(\"*IrR;'BS0Io9C/K9,Ne\", (Integer) null, (-1));\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.getConnPublic();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getOrders(\"\");\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.checkDBProductName();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.createQuote(\"]._l1\", \"]._l1\", bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    try {\r\n        tradeDirect0.completeOrder((Integer) null, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = tradeDirect0.getAccountProfileData(\",4Z\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.io.File", "com.ibm.websphere.samples.daytrader.direct.TradeDirect", "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "org.evosuite.runtime.mock.java.io.MockPrintStream", "org.evosuite.runtime.mock.java.io.MockPrintWriter", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.mock.java.io.MockFileOutputStream", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.mock.java.io.MockFile", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TimerStat" : {
      "sequences" : [ "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setCount(1864);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMax();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMaxSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setTotalTime(1.0);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMin(1864);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getAvgSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMax(1864);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMin();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMinSecs();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.util.TimerStat", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean" : {
      "sequences" : [ "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    // Undeclared exception!\r\n    try {\r\n        marketSummaryDataBean0.toString();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(5L);\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean(bigDecimal0, bigDecimal0, 0.0, (Collection<QuoteDataBean>) null, (Collection<QuoteDataBean>) null);\r\n    String string0 = marketSummaryDataBean0.toString();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.setTopLosers((Collection<QuoteDataBean>) null);\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.print();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.setTopLosers((Collection<QuoteDataBean>) null);\r\n    String string0 = marketSummaryDataBean0.toString();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.util.Collection", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData" : {
      "sequences" : [ "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setPurchaseDate((Date) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigInteger bigInteger0 = BigInteger.TEN;\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    holdingData0.setBasis(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    // Undeclared exception!\r\n    try {\r\n        holdingData0.getGainHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    double double0 = holdingData0.getQuantity();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Date date0 = holdingData0.getPurchaseDate();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    holdingData0.setPurchasePrice(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-1));\r\n    holdingData0.setPrice(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setMarketValue((BigDecimal) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Integer integer0 = new Integer((-1));\r\n    holdingData0.setHoldingID(integer0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getBasis();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    holdingData0.setGain(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getMarketValue();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuantity(3650.156);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    String string0 = holdingData0.getQuoteID();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPurchasePrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getGain();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuoteID(\"V8 Nc{FF\");\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Integer integer0 = holdingData0.getHoldingID();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "java.util.Date", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "java.math.BigInteger", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage" : {
      "sequences" : [ "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getKey();\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setValue((String) null);\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setKey(\"Nv}RMhxQ9)8bkn\");\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getValue();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.OrderData" : {
      "sequences" : [ "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    orderData0.setOpenDate(mockDate0);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    orderData0.setOrderID(integer0);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    orderData0.setPrice((BigDecimal) null);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(23, 23, 23, 23, 23);\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 23);\r\n    OrderData orderData0 = new OrderData((Integer) null, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-1.0), (String) null, bigDecimal0);\r\n    orderData0.setOrderFee(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    orderData0.setTotal(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    orderData0.setOrderStatus((String) null);\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(23, 23, 23, 23, 23);\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 23);\r\n    OrderData orderData0 = new OrderData((Integer) null, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-1.0), (String) null, bigDecimal0);\r\n    orderData0.setOrderType(\"i1_e)k+`kFv+M5Q2cUD\");\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    orderData0.setSymbol(\"\");\r\n}", "{\r\n    Integer integer0 = new Integer((-808));\r\n    MockDate mockDate0 = new MockDate((-808), 0, 1160, 1160, 1160);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"j|+7RtjfA~Uq\", 1160, \"j|+7RtjfA~Uq\", bigDecimal0);\r\n    orderData0.setQuantity((-4376.8832262));\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    Date date0 = orderData0.getCompletionDate();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    Integer integer0 = orderData0.getOrderID();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    String string0 = orderData0.getOrderType();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    BigDecimal bigDecimal1 = orderData0.getPrice();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0L);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"Xx\", 0L, \"i=K2\\\"+J'n:\");\r\n    double double0 = orderData0.getQuantity();\r\n}", "{\r\n    Integer integer0 = new Integer((-1469));\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, (-1), (-2666));\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"\", 0, \"\");\r\n    String string0 = orderData0.getSymbol();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    Date date0 = orderData0.getOpenDate();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    String string0 = orderData0.getOrderStatus();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"H+N(G$,_\", 1, \"H+N(G$,_\", bigDecimal0);\r\n    orderData0.setCompletionDate(mockDate0);\r\n}", "{\r\n    Integer integer0 = new Integer((-808));\r\n    MockDate mockDate0 = new MockDate((-808), 0, 1160, 1160, 1160);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"j|+7RtjfA~Uq\", 1160, \"j|+7RtjfA~Uq\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getTotal();\r\n}", "{\r\n    Integer integer0 = new Integer((-808));\r\n    MockDate mockDate0 = new MockDate((-808), 0, 1160, 1160, 1160);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"j|+7RtjfA~Uq\", 1160, \"j|+7RtjfA~Uq\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getOrderFee();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.web.jsf.OrderData", "org.evosuite.runtime.EvoRunnerParameters", "java.util.Date", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.CompleteOrderThread" : {
      "sequences" : [ "{\r\n    Integer integer0 = new Integer(0);\r\n    CompleteOrderThread completeOrderThread0 = new CompleteOrderThread(integer0, false);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "com.ibm.websphere.samples.daytrader.util.CompleteOrderThread", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage" : {
      "sequences" : [ "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    actionMessage0.doDecoding((String) null);\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    String string0 = actionMessage0.getDecodedAction();\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.decodedAction = \"\";\r\n    actionMessage0.doDecoding((String) null);\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.doDecoding(\") --> failed\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" : {
      "sequences" : [ "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean(\"1>[6_I_M\", \"{~=<b6/r[AOwCq`;#y\", \"{~=<b6/r[AOwCq`;#y\", \"1>[6_I_M\", \"<BR>Account Profile Data for userID: <B>\", \"{~=<b6/r[AOwCq`;#y\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\");\r\n    AccountDataBean accountDataBean0 = accountProfileDataBean0.getAccount();\r\n}", "{\r\n    // Undeclared exception!\r\n    AccountProfileDataBean.getRandomInstance();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\");\r\n    MockDate mockDate0 = new MockDate((-1471), 1364, 0);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean((-1471), (-1471), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    accountProfileDataBean0.setAccount(accountDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setUserID(\"\");\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\");\r\n    String string0 = accountProfileDataBean0.toHTML();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"+:J?m2Mu$8$Z>\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\");\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean(\"+:J?m2Mu$8$Z>\", \"\", \"/tradehomeImg.jsp\", \"CY[XZ]4E\", \"\", \"java:comp/env/jdbc/TradeDataSource\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"\\\"4PFU+_zJ5T\", \"\\\"4PFU+_zJ5T\", \"\\\"4PFU+_zJDT\", \"\\\"4PFU+_zJDT\", \"\\\"4PFU+_zJDT\", \"\\\"4PFU+_zJDT\");\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean(\"\\\"4PFU+_zJDT\", \"\\\"4PFU+_zJDT\", \"\\\"4PFU+_zJ5T\", \"\\\"4PFU+_zJ5T\", \"\\\"4PFU+_zJ5T\", \"\\\"4PFU+_zJ5T\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.print();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    Object object0 = new Object();\r\n    boolean boolean0 = accountProfileDataBean0.equals(object0);\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" : {
      "sequences" : [ "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean0 = orderDataBean0.getQuote();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"3WIBJ@^T1jS}~q#cd-Y\", \"completed\", mockDate0, mockDate0, 1, bigDecimal0, bigDecimal0, \"completed\");\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(0, 0, 1030, 0, (-1341));\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Integer integer0 = new Integer(1030);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, 100000, 100000, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"\", \"\", mockDate0, mockDate0, 17.1195108579, bigDecimal0, bigDecimal0, accountDataBean0, quoteDataBean0, holdingDataBean0);\r\n    HoldingDataBean holdingDataBean1 = orderDataBean0.getHolding();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    orderDataBean0.print();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    AccountDataBean accountDataBean0 = orderDataBean0.getAccount();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    boolean boolean0 = orderDataBean0.equals(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer(2654);\r\n    MockDate mockDate0 = new MockDate(2654);\r\n    BigDecimal bigDecimal0 = new BigDecimal(40);\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"(y\", \"completed\", mockDate0, mockDate0, 0.0, bigDecimal0, bigDecimal0, \"completed\");\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"<h<``8>tGH\");\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"BV~0]I~Nc4vKb,\", \"BV~0]I~Nc4vKb,\", mockDate0, mockDate0, 0.0, bigDecimal0, bigDecimal0, (AccountDataBean) null, quoteDataBean0, (HoldingDataBean) null);\r\n    boolean boolean0 = orderDataBean0.isBuy();\r\n}", "{\r\n    Integer integer0 = new Integer(2);\r\n    MockDate mockDate0 = new MockDate();\r\n    BigInteger bigInteger0 = BigInteger.ZERO;\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"\", \"\", mockDate0, mockDate0, 0.0, bigDecimal0, bigDecimal0, \"\");\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    Random.setNextRandom(100000);\r\n    OrderDataBean orderDataBean1 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean1.equals(orderDataBean0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(439, 439, 439, 1907, 1907);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) 439);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean((-1014), (-1014), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"<BR>Order <B>\");\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"<BR>Order <B>\", (String) null, (-1014), bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, 578.9223510569);\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"<BR>Order <B>\", \"<BR>Order <B>\", mockDate0, mockDate0, 439, bigDecimal0, bigDecimal0, accountDataBean0, quoteDataBean0, holdingDataBean0);\r\n    String string0 = orderDataBean0.toHTML();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean1 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean1.equals(orderDataBean0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    OrderDataBean orderDataBean1 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean1);\r\n}", "{\r\n    Integer integer0 = new Integer(2);\r\n    MockDate mockDate0 = new MockDate();\r\n    BigInteger bigInteger0 = BigInteger.ZERO;\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"\", \"\", mockDate0, mockDate0, 0.0, bigDecimal0, bigDecimal0, \"\");\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.Random", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.math.BigInteger", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}