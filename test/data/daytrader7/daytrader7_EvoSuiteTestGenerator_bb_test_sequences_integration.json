{
  "test_sequences" : {
    "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean" : {
      "sequences" : [ "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setNewUserCount((-1));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setCancelledOrderCount((-282));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setBuyOrderCount((-1701));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    String string0 = runStatsDataBean0.toString();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setHoldingCount((-1038));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLoginCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOpenOrderCount((-1349));\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    int int0 = runStatsDataBean0.getTradeStockCount();\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSellOrderCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setDeletedOrderCount(2533);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeStockCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setOrderCount(1);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setTradeUserCount(0);\r\n}", "{\r\n    RunStatsDataBean runStatsDataBean0 = new RunStatsDataBean();\r\n    runStatsDataBean0.setSumLogoutCount((-43));\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue" : {
      "sequences" : [ "{\r\n    PingServlet2MDBQueue pingServlet2MDBQueue0 = new PingServlet2MDBQueue();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"queueConnectionFactory\", (Object) connectionFactory0);\r\n    Queue queue0 = mock(Queue.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"tradeBrokerQueue\", (Object) queue0);\r\n    Injector.validateBean(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class);\r\n    String string0 = pingServlet2MDBQueue0.getServletInfo();\r\n}", "{\r\n    PingServlet2MDBQueue pingServlet2MDBQueue0 = new PingServlet2MDBQueue();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Connection) null).when(connectionFactory0).createConnection();\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"queueConnectionFactory\", (Object) connectionFactory0);\r\n    Queue queue0 = mock(Queue.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"tradeBrokerQueue\", (Object) queue0);\r\n    Injector.validateBean(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class);\r\n    TradeConfig.setPrimIterations(0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2MDBQueue0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2MDBQueue pingServlet2MDBQueue0 = new PingServlet2MDBQueue();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"queueConnectionFactory\", (Object) connectionFactory0);\r\n    Queue queue0 = mock(Queue.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"tradeBrokerQueue\", (Object) queue0);\r\n    Injector.validateBean(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class);\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingServlet2MDBQueue0.init((ServletConfig) tradeConfigServlet0);\r\n}", "{\r\n    PingServlet2MDBQueue pingServlet2MDBQueue0 = new PingServlet2MDBQueue();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Connection) null).when(connectionFactory0).createConnection();\r\n    doReturn((JMSContext) null).when(connectionFactory0).createContext();\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"queueConnectionFactory\", (Object) connectionFactory0);\r\n    Queue queue0 = mock(Queue.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class, \"tradeBrokerQueue\", (Object) queue0);\r\n    Injector.validateBean(pingServlet2MDBQueue0, (Class<?>) PingServlet2MDBQueue.class);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2MDBQueue0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.jms.Connection", "com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBQueue", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.jms.Queue", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.jms.JMSContext", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "javax.jms.ConnectionFactory" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountDataBean" : {
      "sequences" : [ "{\r\n    Integer integer0 = new Integer(10000);\r\n    MockDate mockDate0 = new MockDate((-504), (-265), 15000, (-1521), 311, 311);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(15000, (-504), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"Nh#J$Ah%ao+n:0fMr\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(311, (-265), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"\");\r\n    accountDataBean0.setAccountID(integer0);\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    Instant instant0 = MockInstant.now();\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-292));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-292), (-2730), date0, date0, bigDecimal0, bigDecimal0, \"<LI>    lastLogin:\");\r\n    Collection<HoldingDataBean> collection0 = accountDataBean0.getHoldings();\r\n}", "{\r\n    Integer integer0 = new Integer(10000);\r\n    MockDate mockDate0 = new MockDate((-504), (-265), 15000, (-1521), 311, 311);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(15000, (-504), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"Nh#J$Ah%ao+n:0fMr\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(integer0, (-203), 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"qUP;\\\"j@(\\u0001|enz>c\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setPassword(\"<LI>      email:\");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login((String) null);\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: null\r\n        // \\tIncorrect password-->null:<LI>      email:\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}", "{\r\n    MockDate mockDate0 = new MockDate((-219), (-219), (-464), (-219), (-219), (-464));\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean((-219), (-219), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"p'YGUb8\");\r\n    accountDataBean0.logout();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    Instant instant0 = MockInstant.now();\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-292));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-292), (-2730), date0, date0, bigDecimal0, bigDecimal0, \"<LI>    lastLogin:\");\r\n    accountDataBean0.print();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setPassword(\"<LI>      email:\");\r\n    accountDataBean0.setProfile(accountProfileDataBean0);\r\n    accountDataBean0.login(\"<LI>      email:\");\r\n}", "{\r\n    // Undeclared exception!\r\n    AccountDataBean.getRandomInstance();\r\n}", "{\r\n    Integer integer0 = new Integer((-792));\r\n    MockDate mockDate0 = new MockDate((-4073), (-792), 0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-792), (-4073), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"zjlFZ0H}\");\r\n    String string0 = accountDataBean0.toHTML();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    Instant instant0 = MockInstant.now();\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-292));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-292), (-2730), date0, date0, bigDecimal0, bigDecimal0, \"<LI>    lastLogin:\");\r\n    boolean boolean0 = accountDataBean0.equals(\"<LI>    lastLogin:\");\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    Integer integer0 = new Integer(10000);\r\n    MockDate mockDate0 = new MockDate((-504), (-265), 15000, (-1521), 311, 311);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(15000, (-504), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"Nh#J$Ah%ao+n:0fMr\");\r\n    AccountDataBean accountDataBean1 = new AccountDataBean(integer0, (-203), 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"qUP;\\\"j@(\\u0001|enz>c\");\r\n    Integer integer1 = new Integer(10000);\r\n    accountDataBean0.setAccountID(integer1);\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean1);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    Instant instant0 = MockInstant.now();\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-292));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-292), (-2730), date0, date0, bigDecimal0, bigDecimal0, \"<LI>    lastLogin:\");\r\n    LinkedList<HoldingDataBean> linkedList0 = new LinkedList<HoldingDataBean>();\r\n    accountDataBean0.setHoldings(linkedList0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    Instant instant0 = MockInstant.now();\r\n    Date date0 = Date.from(instant0);\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-292));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(integer0, (-292), (-2730), date0, date0, bigDecimal0, bigDecimal0, \"<LI>    lastLogin:\");\r\n    int int0 = accountDataBean0.hashCode();\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    Collection<OrderDataBean> collection0 = accountDataBean0.getOrders();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate((-504), (-265), 15000, (-1521), 311, 311);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(15000, (-504), mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"Nh#J$Ah%ao+n:0fMr\");\r\n    boolean boolean0 = accountDataBean0.equals(accountDataBean0);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    LinkedHashSet<OrderDataBean> linkedHashSet0 = new LinkedHashSet<OrderDataBean>();\r\n    accountDataBean0.setOrders(linkedHashSet0);\r\n}", "{\r\n    AccountDataBean accountDataBean0 = new AccountDataBean();\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataBean0.login(\"<LI>      email:\");\r\n    } catch (EJBException e) {\r\n        // \r\n        // AccountBean:Login failure for account: nullnull AccountProfile\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.entities.AccountDataBean\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Date", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.time.Instant", "javax.ejb.EJBException", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.mock.java.time.MockInstant", "static org.junit.Assert.assertEquals", "java.util.LinkedList", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "java.util.LinkedHashSet", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletSetContentLength" : {
      "sequences" : [ "{\r\n    PingServletSetContentLength pingServletSetContentLength0 = new PingServletSetContentLength();\r\n    String string0 = pingServletSetContentLength0.getServletInfo();\r\n}", "{\r\n    PingServletSetContentLength pingServletSetContentLength0 = new PingServletSetContentLength();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServletSetContentLength0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServletSetContentLength pingServletSetContentLength0 = new PingServletSetContentLength();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"{M,20>[m`ka1ZI`9g\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServletSetContentLength0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServletSetContentLength pingServletSetContentLength0 = new PingServletSetContentLength();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher();\r\n    pingServletSetContentLength0.init((ServletConfig) tJWSServletDispatcher0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.web.prims.PingServletSetContentLength", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDI" : {
      "sequences" : [ "{\r\n    PingServletCDI pingServletCDI0 = new PingServletCDI();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDI0, (Class<?>) PingServletCDI.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    PingEJBLocalDecorator pingEJBLocalDecorator0 = new PingEJBLocalDecorator();\r\n    PingEJBLocal pingEJBLocal0 = new PingEJBLocal();\r\n    Injector.inject(pingEJBLocalDecorator0, (Class<?>) PingEJBLocalDecorator.class, \"ejb\", (Object) pingEJBLocal0);\r\n    Injector.validateBean(pingEJBLocalDecorator0, (Class<?>) PingEJBLocalDecorator.class);\r\n    Injector.inject(pingServletCDI0, (Class<?>) PingServletCDI.class, \"ejb\", (Object) pingEJBLocalDecorator0);\r\n    Injector.validateBean(pingServletCDI0, (Class<?>) PingServletCDI.class);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServletCDI0.doGet(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServletCDI\", e);\r\n    }\r\n}", "{\r\n    PingServletCDI pingServletCDI0 = new PingServletCDI();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDI0, (Class<?>) PingServletCDI.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    PingEJBLocalDecorator pingEJBLocalDecorator0 = new PingEJBLocalDecorator();\r\n    PingEJBLocal pingEJBLocal0 = new PingEJBLocal();\r\n    Injector.inject(pingEJBLocalDecorator0, (Class<?>) PingEJBLocalDecorator.class, \"ejb\", (Object) pingEJBLocal0);\r\n    Injector.validateBean(pingEJBLocalDecorator0, (Class<?>) PingEJBLocalDecorator.class);\r\n    Injector.inject(pingServletCDI0, (Class<?>) PingServletCDI.class, \"ejb\", (Object) pingEJBLocalDecorator0);\r\n    Injector.validateBean(pingServletCDI0, (Class<?>) PingServletCDI.class);\r\n    pingServletCDI0.init((ServletConfig) pingServletCDI0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDI", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.prims.PingEJBLocal", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.PingEJBLocalDecorator" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic" : {
      "sequences" : [ "{\r\n    PingServlet2MDBTopic pingServlet2MDBTopic0 = new PingServlet2MDBTopic();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"topicConnectionFactory\", (Object) connectionFactory0);\r\n    Topic topic0 = mock(Topic.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"tradeStreamerTopic\", (Object) topic0);\r\n    Injector.validateBean(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class);\r\n    String string0 = pingServlet2MDBTopic0.getServletInfo();\r\n}", "{\r\n    PingServlet2MDBTopic pingServlet2MDBTopic0 = new PingServlet2MDBTopic();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Connection) null).when(connectionFactory0).createConnection();\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"topicConnectionFactory\", (Object) connectionFactory0);\r\n    Topic topic0 = mock(Topic.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"tradeStreamerTopic\", (Object) topic0);\r\n    Injector.validateBean(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class);\r\n    TradeConfig.setPrimIterations((-1130));\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2MDBTopic0.doGet((HttpServletRequest) null, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2MDBTopic pingServlet2MDBTopic0 = new PingServlet2MDBTopic();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"topicConnectionFactory\", (Object) connectionFactory0);\r\n    Topic topic0 = mock(Topic.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"tradeStreamerTopic\", (Object) topic0);\r\n    Injector.validateBean(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class);\r\n    pingServlet2MDBTopic0.init((ServletConfig) pingServlet2MDBTopic0);\r\n}", "{\r\n    PingServlet2MDBTopic pingServlet2MDBTopic0 = new PingServlet2MDBTopic();\r\n    ConnectionFactory connectionFactory0 = mock(ConnectionFactory.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Connection) null).when(connectionFactory0).createConnection();\r\n    doReturn((JMSContext) null).when(connectionFactory0).createContext();\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"topicConnectionFactory\", (Object) connectionFactory0);\r\n    Topic topic0 = mock(Topic.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class, \"tradeStreamerTopic\", (Object) topic0);\r\n    Injector.validateBean(pingServlet2MDBTopic0, (Class<?>) PingServlet2MDBTopic.class);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2MDBTopic0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.jms.Connection", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "javax.jms.Topic", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.ejb3.PingServlet2MDBTopic", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.jms.JMSContext", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "javax.jms.ConnectionFactory" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2PDF" : {
      "sequences" : [ "{\r\n    PingServlet2PDF pingServlet2PDF0 = new PingServlet2PDF();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet2PDF0.doPost(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet2PDF\", e);\r\n    }\r\n}", "{\r\n    PingServlet2PDF pingServlet2PDF0 = new PingServlet2PDF();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2PDF0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2PDF pingServlet2PDF0 = new PingServlet2PDF();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"http://localhost:9080/daytrader/WAS_V7_64-bit_performance.pdf\");\r\n    boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"{R|\");\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet2PDF0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"java.io.BufferedOutputStream\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2PDF", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.testdata.NetworkHandling", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.testdata.EvoSuiteURL" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextSync" : {
      "sequences" : [ "{\r\n    PingWebSocketTextSync pingWebSocketTextSync0 = new PingWebSocketTextSync();\r\n    MockThrowable mockThrowable0 = new MockThrowable(\"\");\r\n    pingWebSocketTextSync0.onError(mockThrowable0);\r\n}", "{\r\n    PingWebSocketTextSync pingWebSocketTextSync0 = new PingWebSocketTextSync();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    pingWebSocketTextSync0.onOpen(session0, endpointConfig0);\r\n}", "{\r\n    PingWebSocketTextSync pingWebSocketTextSync0 = new PingWebSocketTextSync();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketTextSync0.ping(\"[!vy*U6cq9z ;it7`\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextSync\", e);\r\n    }\r\n}", "{\r\n    PingWebSocketTextSync pingWebSocketTextSync0 = new PingWebSocketTextSync();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    CloseReason.CloseCodes closeReason_CloseCodes0 = CloseReason.CloseCodes.NORMAL_CLOSURE;\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCodes0, \"n6mE\");\r\n    pingWebSocketTextSync0.onClose(session0, closeReason0);\r\n}" ],
      "imports" : [ "javax.websocket.Session", "static org.junit.Assert.assertNull", "javax.websocket.CloseReason", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextSync", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeBuildDB" : {
      "sequences" : [ "{\r\n    String[] stringArray0 = new String[5];\r\n    TradeBuildDB.main(stringArray0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.TradeBuildDB", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaJNDI" : {
      "sequences" : [ "{\r\n    PingServletCDIBeanManagerViaJNDI pingServletCDIBeanManagerViaJNDI0 = new PingServletCDIBeanManagerViaJNDI();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDIBeanManagerViaJNDI0, (Class<?>) PingServletCDIBeanManagerViaJNDI.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    Injector.validateBean(pingServletCDIBeanManagerViaJNDI0, (Class<?>) PingServletCDIBeanManagerViaJNDI.class);\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingServletCDIBeanManagerViaJNDI0.init((ServletConfig) tradeConfigServlet0);\r\n}", "{\r\n    PingServletCDIBeanManagerViaJNDI pingServletCDIBeanManagerViaJNDI0 = new PingServletCDIBeanManagerViaJNDI();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDIBeanManagerViaJNDI0, (Class<?>) PingServletCDIBeanManagerViaJNDI.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    Injector.validateBean(pingServletCDIBeanManagerViaJNDI0, (Class<?>) PingServletCDIBeanManagerViaJNDI.class);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServletCDIBeanManagerViaJNDI0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaJNDI\", e);\r\n    }\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaJNDI", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData" : {
      "sequences" : [ "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuantity(1);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    // Undeclared exception!\r\n    try {\r\n        holdingData0.getGainHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    double double0 = holdingData0.getQuantity();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Date date0 = holdingData0.getPurchaseDate();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setHoldingID((Integer) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    holdingData0.setPrice(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = new BigDecimal(985);\r\n    holdingData0.setPurchasePrice(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    MockDate mockDate0 = new MockDate(4080, (-1825), (-165), 0, 0, 0);\r\n    holdingData0.setPurchaseDate(mockDate0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getBasis();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    holdingData0.setBasis(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setGain((BigDecimal) null);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getMarketValue();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    holdingData0.setMarketValue(bigDecimal0);\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    String string0 = holdingData0.getQuoteID();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getPurchasePrice();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    holdingData0.setQuoteID(\"\");\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    BigDecimal bigDecimal0 = holdingData0.getGain();\r\n}", "{\r\n    HoldingData holdingData0 = new HoldingData();\r\n    Integer integer0 = holdingData0.getHoldingID();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "java.util.Date", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextAsync" : {
      "sequences" : [ "{\r\n    PingWebSocketTextAsync pingWebSocketTextAsync0 = new PingWebSocketTextAsync();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketTextAsync0.ping(\":\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextAsync\", e);\r\n    }\r\n}", "{\r\n    PingWebSocketTextAsync pingWebSocketTextAsync0 = new PingWebSocketTextAsync();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    pingWebSocketTextAsync0.onOpen(session0, endpointConfig0);\r\n}", "{\r\n    PingWebSocketTextAsync pingWebSocketTextAsync0 = new PingWebSocketTextAsync();\r\n    MockThrowable mockThrowable0 = new MockThrowable(\"}}f\");\r\n    pingWebSocketTextAsync0.onError(mockThrowable0);\r\n}", "{\r\n    PingWebSocketTextAsync pingWebSocketTextAsync0 = new PingWebSocketTextAsync();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    CloseReason.CloseCode closeReason_CloseCode0 = CloseReason.CloseCodes.getCloseCode(2038);\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCode0, \"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextAsync\");\r\n    pingWebSocketTextAsync0.onClose(session0, closeReason0);\r\n}" ],
      "imports" : [ "javax.websocket.Session", "static org.junit.Assert.assertNull", "javax.websocket.CloseReason", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketTextAsync", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF" : {
      "sequences" : [ "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Date date0 = accountDataJSF0.getCurrentTime();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.toggleShowAllRows();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setLastLogin((Date) null);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataJSF0.getGainHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = accountDataJSF0.getNumberOfOrderRows();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setProfileID(\"\");\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    OrderData[] orderDataArray0 = new OrderData[5];\r\n    accountDataJSF0.setAllOrders(orderDataArray0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = accountDataJSF0.getNumberOfOrders();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setCreationDate((Date) null);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    accountDataJSF0.setGainPercent(bigDecimal0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Date date0 = accountDataJSF0.getCreationDate();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    OrderData[] orderDataArray0 = accountDataJSF0.getAllOrders();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    MockDate mockDate0 = new MockDate(864, 0, 0);\r\n    accountDataJSF0.setSessionCreationDate(mockDate0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    accountDataJSF0.setGain(bigDecimal0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getOpenBalance();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = new Integer(2860);\r\n    accountDataJSF0.setNumberHoldings(integer0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Integer integer0 = new Integer(932);\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setAccountID(integer0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setLogoutCount(40);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    OrderData[] orderDataArray0 = new OrderData[4];\r\n    accountDataJSF0.setClosedOrders(orderDataArray0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getGainPercent();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setLoginCount(0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setSumOfCashHoldings((BigDecimal) null);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = new Integer((-1903));\r\n    accountDataJSF0.setNumberOfOrders(integer0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    accountDataJSF0.setCurrentTime((Date) null);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getGain();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = accountDataJSF0.getAccountID();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Integer integer0 = accountDataJSF0.getNumberHoldings();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getSumOfCashHoldings();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    byte[] byteArray0 = new byte[2];\r\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    accountDataJSF0.setBalance(bigDecimal0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    OrderData[] orderDataArray0 = accountDataJSF0.getClosedOrders();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    accountDataJSF0.setHoldingsTotal(bigDecimal0);\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Date date0 = accountDataJSF0.getLastLogin();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Date date0 = accountDataJSF0.getSessionCreationDate();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    String string0 = accountDataJSF0.getProfileID();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    int int0 = accountDataJSF0.getLoginCount();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        accountDataJSF0.getGainPercentHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getBalance();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = accountDataJSF0.getHoldingsTotal();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    int int0 = accountDataJSF0.getLogoutCount();\r\n}", "{\r\n    AccountDataJSF accountDataJSF0 = new AccountDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(accountDataJSF0, (Class<?>) AccountDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    Injector.executePostConstruct((Object) accountDataJSF0, (Class<?>) AccountDataJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    accountDataJSF0.setOpenBalance(bigDecimal0);\r\n}" ],
      "imports" : [ "javax.faces.context.ExternalContext", "static org.junit.Assert.assertNull", "java.util.Date", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "com.ibm.websphere.samples.daytrader.TradeAction", "static org.evosuite.shaded.org.mockito.Mockito.*", "com.ibm.websphere.samples.daytrader.web.jsf.AccountDataJSF", "com.ibm.websphere.samples.daytrader.web.jsf.OrderData", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "java.math.BigInteger", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletLargeContentLength" : {
      "sequences" : [ "{\r\n    PingServletLargeContentLength pingServletLargeContentLength0 = new PingServletLargeContentLength();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(0L).when(httpServletRequest0).getContentLengthLong();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServletLargeContentLength0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServletLargeContentLength pingServletLargeContentLength0 = new PingServletLargeContentLength();\r\n    String string0 = pingServletLargeContentLength0.getServletInfo();\r\n}", "{\r\n    PingServletLargeContentLength pingServletLargeContentLength0 = new PingServletLargeContentLength();\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    pingServletLargeContentLength0.init((ServletConfig) tradeAppServlet0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.prims.PingServletLargeContentLength", "javax.servlet.http.HttpServletResponseWrapper", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketJson" : {
      "sequences" : [ "{\r\n    PingWebSocketJson pingWebSocketJson0 = new PingWebSocketJson();\r\n    CloseReason.CloseCodes closeReason_CloseCodes0 = CloseReason.CloseCodes.RESERVED;\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCodes0, (String) null);\r\n    pingWebSocketJson0.onClose((Session) null, closeReason0);\r\n}", "{\r\n    PingWebSocketJson pingWebSocketJson0 = new PingWebSocketJson();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketJson0.onError((Throwable) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketJson\", e);\r\n    }\r\n}", "{\r\n    PingWebSocketJson pingWebSocketJson0 = new PingWebSocketJson();\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketJson0.ping(jsonMessage0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketJson\", e);\r\n    }\r\n}", "{\r\n    PingWebSocketJson pingWebSocketJson0 = new PingWebSocketJson();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketJson0.onOpen((Session) null, (EndpointConfig) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketJson\", e);\r\n    }\r\n}" ],
      "imports" : [ "javax.websocket.Session", "static org.junit.Assert.assertNull", "javax.websocket.CloseReason", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketJson" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.TradeConfigJSF" : {
      "sequences" : [ "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    TradeConfig.setMAX_USERS(0);\r\n    String[] stringArray0 = new String[6];\r\n    stringArray0[0] = \"\\t\\tUse Remote EJB Interface:\\t\";\r\n    stringArray0[1] = \"\";\r\n    stringArray0[2] = \"[VZ^qXw>ErUk?X2KJ$\";\r\n    stringArray0[3] = \"\\n\\t\";\r\n    stringArray0[4] = \"TradeConfig.setConfigParm(..): minor exception caughttrying to set accessMode to \";\r\n    stringArray0[5] = \"reverting to current value: \";\r\n    TradeConfig.webInterfaceNames = stringArray0;\r\n    String[] stringArray1 = new String[4];\r\n    stringArray1[0] = \"'Mxu+2\";\r\n    stringArray1[1] = \"\";\r\n    stringArray1[2] = \"\";\r\n    stringArray1[3] = \" users created, \";\r\n    tradeConfigJSF0.setWebInterfaceList(stringArray1);\r\n    int int0 = tradeConfigJSF0.getPrimIterations();\r\n    boolean boolean0 = tradeConfigJSF0.isLongRun();\r\n    tradeConfigJSF0.setmaxQuotes((-2715));\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    TradeConfig.setMAX_QUOTES((-1222));\r\n    TradeConfig.setPercentSentToWebsocket(2369);\r\n    tradeConfigJSF0.setTrace(true);\r\n    TradeConfig.setRunTimeModeNames((String[]) null);\r\n    tradeConfigJSF0.setMarketSummaryInterval(0);\r\n    TradeConfig.setPrimIterations(3479);\r\n    String[] stringArray0 = new String[1];\r\n    stringArray0[0] = \"revering to current value: \";\r\n    tradeConfigJSF0.setOrderProcessingModeList(stringArray0);\r\n    tradeConfigJSF0.setDisplayOrderAlerts(true);\r\n    TradeConfig.webInterface = (-4299);\r\n    TradeConfig.setTrace(false);\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(false);\r\n    TradeConfig.setDisplayOrderAlerts(true);\r\n    boolean boolean0 = tradeConfigJSF0.isDisplayOrderAlerts();\r\n    tradeConfigJSF0.setResult(\"revering to current value: \");\r\n    boolean boolean1 = tradeConfigJSF0.isActionTrace();\r\n    boolean boolean2 = tradeConfigJSF0.isLongRun();\r\n    tradeConfigJSF0.setPrimIterations(3479);\r\n    tradeConfigJSF0.setRuntimeMode(\"revering to current value: \");\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER = bigDecimal0;\r\n    tradeConfigJSF0.setMarketSummaryInterval(304);\r\n    TradeConfig.setLongRun(true);\r\n    boolean boolean0 = false;\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(false);\r\n    tradeConfigJSF0.setPrimIterations(1735);\r\n    TradeConfig.setUseRemoteEJBInterface(true);\r\n    tradeConfigJSF0.setMarketSummaryInterval(6);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeConfigJSF0.resetTrade();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.TradeConfigJSF\", e);\r\n    }\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    String[] stringArray0 = new String[7];\r\n    stringArray0[0] = \"\";\r\n    stringArray0[1] = \"K\";\r\n    stringArray0[2] = \"r*.$ dGl]VsIMf+J7\";\r\n    stringArray0[3] = \"]?@A?9 o67q[Hx<\";\r\n    stringArray0[4] = \"M.nY\";\r\n    stringArray0[5] = \"\\t\\tTradeStreamer MDB Enabled:\\t\";\r\n    stringArray0[6] = \"r]sMFbk\";\r\n    tradeConfigJSF0.setOrderProcessingModeList(stringArray0);\r\n    TradeConfig.setOrderProcessingMode((-1));\r\n    tradeConfigJSF0.setPercentSentToWebsocket(0);\r\n    String[] stringArray1 = new String[2];\r\n    stringArray1[0] = \"/order.jsp\";\r\n    stringArray1[1] = \"/dbscripts/oracle/Table.ddl\";\r\n    TradeConfig.setRunTimeModeNames(stringArray1);\r\n    tradeConfigJSF0.setRuntimeMode(\"Apache Derby\");\r\n    TradeConfig.setWebInterface((-1351));\r\n    int int0 = tradeConfigJSF0.getPrimIterations();\r\n    int int1 = tradeConfigJSF0.getMaxQuotes();\r\n    String string0 = tradeConfigJSF0.getOrderProcessingMode();\r\n    String string1 = tradeConfigJSF0.populateDatabase();\r\n    boolean boolean0 = tradeConfigJSF0.isPublishQuotePriceChange();\r\n    tradeConfigJSF0.setPercentSentToWebsocket(1);\r\n    int int2 = tradeConfigJSF0.getMarketSummaryInterval();\r\n    boolean boolean1 = tradeConfigJSF0.isTrace();\r\n    String string2 = tradeConfigJSF0.getRuntimeMode();\r\n    // Undeclared exception!\r\n    try {\r\n        tradeConfigJSF0.updateConfig();\r\n    } catch (ArrayIndexOutOfBoundsException e) {\r\n        // \r\n        // -1\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.TradeConfigJSF\", e);\r\n    }\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(true);\r\n    tradeConfigJSF0.setWebInterface(\"fq)&\\\"I!d]Y'h^vg9S\");\r\n    String[] stringArray0 = tradeConfigJSF0.getOrderProcessingModeList();\r\n    tradeConfigJSF0.setRuntimeModeList(stringArray0);\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    TradeConfig.setActionTrace(true);\r\n    tradeConfigJSF0.setPublishQuotePriceChange(true);\r\n    TradeConfig.setDisplayOrderAlerts(true);\r\n    BigDecimal bigDecimal0 = new BigDecimal((-2758L));\r\n    TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER = bigDecimal0;\r\n    boolean boolean0 = tradeConfigJSF0.isLongRun();\r\n    boolean boolean1 = tradeConfigJSF0.isLongRun();\r\n    tradeConfigJSF0.setOrderProcessingMode(\"%=A\");\r\n    String string0 = tradeConfigJSF0.populateDatabase();\r\n    int int0 = tradeConfigJSF0.getMaxUsers();\r\n    tradeConfigJSF0.setPrimIterations(0);\r\n    tradeConfigJSF0.setMarketSummaryInterval(2570);\r\n    tradeConfigJSF0.setLongRun(true);\r\n    int int1 = tradeConfigJSF0.getPercentSentToWebsocket();\r\n    tradeConfigJSF0.setRuntimeMode(\"database\");\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(true);\r\n    tradeConfigJSF0.updateConfig();\r\n    String string1 = tradeConfigJSF0.getOrderProcessingMode();\r\n    tradeConfigJSF0.setPrimIterations(1);\r\n    String string2 = tradeConfigJSF0.getResult();\r\n    String string3 = tradeConfigJSF0.getResult();\r\n    tradeConfigJSF0.setWebInterface(\"\\t\\tDisplay Order Alerts:\\t\\t\");\r\n    tradeConfigJSF0.updateConfig();\r\n    tradeConfigJSF0.setWebInterface(\"%=A\");\r\n    int int2 = tradeConfigJSF0.getMaxUsers();\r\n    boolean boolean2 = tradeConfigJSF0.isLongRun();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    TradeConfig.orderProcessingMode = (-661);\r\n    tradeConfigJSF0.setmaxQuotes(0);\r\n    tradeConfigJSF0.setTrace(true);\r\n    String[] stringArray0 = new String[8];\r\n    stringArray0[0] = \"maxUsers\";\r\n    stringArray0[1] = \"CM1Z)y\";\r\n    stringArray0[2] = \"IzmT~=d-R~uIhrRTgY\";\r\n    stringArray0[3] = \"\";\r\n    stringArray0[4] = \"C8oym_M<*hl QYt)\";\r\n    stringArray0[5] = \"\\t\\tPrimitive Iterations:\\t\\t\";\r\n    stringArray0[6] = \"\";\r\n    stringArray0[7] = \"/portfolio.jsp\";\r\n    TradeConfig.orderProcessingModeNames = stringArray0;\r\n    TradeConfig.setMAX_USERS(0);\r\n    tradeConfigJSF0.setRuntimeMode(\"\\t\\tDisplay Order Alerts:\\t\\t\");\r\n    tradeConfigJSF0.setWebInterface((String) null);\r\n    boolean boolean0 = tradeConfigJSF0.isActionTrace();\r\n    tradeConfigJSF0.setLongRun(true);\r\n    String[] stringArray1 = tradeConfigJSF0.getRuntimeModeList();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    tradeConfigJSF0.setPrimIterations((-2469));\r\n    TradeConfig.setOrderProcessingMode(1829);\r\n    TradeConfig.setMarketSummaryInterval((-4433));\r\n    TradeConfig.setActionTrace(false);\r\n    tradeConfigJSF0.setActionTrace(true);\r\n    TradeConfig.setOrderProcessingMode(111);\r\n    tradeConfigJSF0.setActionTrace(true);\r\n    tradeConfigJSF0.setActionTrace(true);\r\n    int int0 = tradeConfigJSF0.getMaxQuotes();\r\n    boolean boolean0 = tradeConfigJSF0.isTrace();\r\n    tradeConfigJSF0.setTrace(true);\r\n    tradeConfigJSF0.setmaxQuotes(111);\r\n    String string0 = tradeConfigJSF0.getWebInterface();\r\n    boolean boolean1 = tradeConfigJSF0.isTrace();\r\n    tradeConfigJSF0.setPrimIterations((-4433));\r\n    String string1 = tradeConfigJSF0.buildDatabaseTables();\r\n    tradeConfigJSF0.setPercentSentToWebsocket(1829);\r\n    boolean boolean2 = tradeConfigJSF0.isPublishQuotePriceChange();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    tradeConfigJSF0.setRuntimeMode((String) null);\r\n    boolean boolean0 = tradeConfigJSF0.isPublishQuotePriceChange();\r\n    String[] stringArray0 = new String[6];\r\n    stringArray0[0] = \"/portfolioImg.jsp\";\r\n    stringArray0[1] = \"\";\r\n    stringArray0[2] = \"\";\r\n    stringArray0[3] = \"\\t\\tTrace Enabled:\\t\\t\\t\";\r\n    stringArray0[4] = \"a'gX[bKzTDsZ\";\r\n    stringArray0[5] = \"UH\";\r\n    tradeConfigJSF0.setRuntimeModeList(stringArray0);\r\n    String string0 = tradeConfigJSF0.buildDatabaseTables();\r\n    boolean boolean1 = tradeConfigJSF0.isDisplayOrderAlerts();\r\n    tradeConfigJSF0.setTrace(true);\r\n    tradeConfigJSF0.updateConfig();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    String[] stringArray0 = new String[5];\r\n    stringArray0[0] = \"\";\r\n    stringArray0[1] = \"\";\r\n    stringArray0[2] = \"\\t\";\r\n    stringArray0[3] = \"reverting to current value\";\r\n    stringArray0[4] = \"\";\r\n    tradeConfigJSF0.setRuntimeModeList(stringArray0);\r\n    String[] stringArray1 = new String[7];\r\n    stringArray1[0] = \"DZBO+ 5=e]O=s  -L\";\r\n    stringArray1[1] = \" vE/5|\";\r\n    stringArray1[2] = \"^73Rg\";\r\n    stringArray1[3] = \"F<=Z0X`x\";\r\n    stringArray1[4] = \"\";\r\n    stringArray1[5] = \"\";\r\n    stringArray1[6] = \"\";\r\n    TradeConfig.webInterfaceNames = stringArray1;\r\n    String string0 = tradeConfigJSF0.populateDatabase();\r\n    TradeConfig.setMAX_USERS(1);\r\n    int int0 = tradeConfigJSF0.getMarketSummaryInterval();\r\n    int int1 = tradeConfigJSF0.getMarketSummaryInterval();\r\n    boolean boolean0 = tradeConfigJSF0.isLongRun();\r\n    tradeConfigJSF0.updateConfig();\r\n    String[] stringArray2 = tradeConfigJSF0.getWebInterfaceList();\r\n    String string1 = tradeConfigJSF0.getRuntimeMode();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(false);\r\n    TradeConfig.setActionTrace(true);\r\n    TradeConfig.setRunTimeMode(0);\r\n    boolean boolean0 = false;\r\n    TradeConfig.setLongRun(false);\r\n    TradeConfig.webInterface = 2619;\r\n    TradeConfig.setMAX_QUOTES(0);\r\n    tradeConfigJSF0.setOrderProcessingMode(\" ****<br/>\");\r\n    tradeConfigJSF0.setLongRun(false);\r\n    boolean boolean1 = tradeConfigJSF0.isUseRemoteEJBInterface();\r\n    tradeConfigJSF0.setResult(\"esqc8X$h:\");\r\n    String[] stringArray0 = new String[6];\r\n    stringArray0[0] = \" ****<br/>\";\r\n    stringArray0[1] = \"esqc8X$h:\";\r\n    stringArray0[2] = \" ****<br/>\";\r\n    stringArray0[3] = \" ****<br/>\";\r\n    stringArray0[4] = \"esqc8X$h:\";\r\n    stringArray0[5] = \" ****<br/>\";\r\n    tradeConfigJSF0.setRuntimeModeList(stringArray0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeConfigJSF0.resetTrade();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.TradeConfigJSF\", e);\r\n    }\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    String[] stringArray0 = new String[2];\r\n    stringArray0[0] = \"\";\r\n    stringArray0[1] = \"dc?L%&Tw<1N\";\r\n    tradeConfigJSF0.setRuntimeModeList(stringArray0);\r\n    tradeConfigJSF0.setOrderProcessingMode(\"\");\r\n    tradeConfigJSF0.setOrderProcessingMode(\"\");\r\n    String[] stringArray1 = tradeConfigJSF0.getRuntimeModeList();\r\n    String[] stringArray2 = tradeConfigJSF0.getRuntimeModeList();\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    String[] stringArray0 = new String[2];\r\n    stringArray0[0] = \"JSw%ZwR%(u-=hXDp\";\r\n    stringArray0[1] = \"&a.oncFB:\";\r\n    TradeConfig.runTimeModeNames = stringArray0;\r\n    TradeConfig.setWebInterface(0);\r\n    tradeConfigJSF0.updateConfig();\r\n    tradeConfigJSF0.setTrace(true);\r\n    String[] stringArray1 = new String[2];\r\n    stringArray1[0] = \"\";\r\n    stringArray1[1] = \"\";\r\n    tradeConfigJSF0.setWebInterfaceList(stringArray1);\r\n    tradeConfigJSF0.setmaxQuotes(20);\r\n    tradeConfigJSF0.setPublishQuotePriceChange(true);\r\n    tradeConfigJSF0.setmaxQuotes(20);\r\n    tradeConfigJSF0.setOrderProcessingMode(\"\\t\\tWeb Interface:\\t\\t\\t\");\r\n    tradeConfigJSF0.setmaxQuotes(20);\r\n}", "{\r\n    TradeConfigJSF tradeConfigJSF0 = new TradeConfigJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    Injector.validateBean(tradeConfigJSF0, (Class<?>) TradeConfigJSF.class);\r\n    TradeConfig.runTimeMode = 0;\r\n    tradeConfigJSF0.setMarketSummaryInterval((-1011));\r\n    tradeConfigJSF0.setMaxUsers(0);\r\n    tradeConfigJSF0.updateConfig();\r\n    tradeConfigJSF0.setTrace(false);\r\n    TradeConfig.setPercentSentToWebsocket(0);\r\n    String string0 = tradeConfigJSF0.buildDatabaseTables();\r\n    tradeConfigJSF0.updateConfig();\r\n    tradeConfigJSF0.setWebInterface(\"\");\r\n    tradeConfigJSF0.setPercentSentToWebsocket(112);\r\n    TradeConfig.setDisplayOrderAlerts(false);\r\n    tradeConfigJSF0.setWebInterface(\"\\\"h\\u0004&QD8{Z}K.(r\");\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(false);\r\n    TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER = null;\r\n    tradeConfigJSF0.setWebInterface(\"/runStats.jsp\");\r\n    tradeConfigJSF0.setUseRemoteEJBInterface(true);\r\n    String string1 = tradeConfigJSF0.getWebInterface();\r\n    int int0 = tradeConfigJSF0.getMaxQuotes();\r\n    tradeConfigJSF0.setPrimIterations(46);\r\n    boolean boolean0 = tradeConfigJSF0.isActionTrace();\r\n}" ],
      "imports" : [ "javax.faces.context.ExternalContext", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.jsf.TradeConfigJSF" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeWebContextListener" : {
      "sequences" : [ "{\r\n    TradeWebContextListener tradeWebContextListener0 = new TradeWebContextListener();\r\n    ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());\r\n    ServletContextEvent servletContextEvent0 = new ServletContextEvent(servletContext0);\r\n    tradeWebContextListener0.contextDestroyed(servletContextEvent0);\r\n}", "{\r\n    TradeWebContextListener tradeWebContextListener0 = new TradeWebContextListener();\r\n    ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((InputStream) null).when(servletContext0).getResourceAsStream(anyString());\r\n    ServletContextEvent servletContextEvent0 = new ServletContextEvent(servletContext0);\r\n    tradeWebContextListener0.contextInitialized(servletContextEvent0);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.TradeWebContextListener", "static org.junit.Assert.assertNull", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "javax.servlet.ServletContextEvent", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.ServletContext", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "java.io.InputStream" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingReentryServlet" : {
      "sequences" : [ "{\r\n    PingReentryServlet pingReentryServlet0 = new PingReentryServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null, (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingReentryServlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingReentryServlet pingReentryServlet0 = new PingReentryServlet();\r\n    HttpServletDispatcher httpServletDispatcher0 = new HttpServletDispatcher();\r\n    pingReentryServlet0.init((ServletConfig) httpServletDispatcher0);\r\n}", "{\r\n    PingReentryServlet pingReentryServlet0 = new PingReentryServlet();\r\n    String string0 = pingReentryServlet0.getServletInfo();\r\n    Cookie[] cookieArray0 = new Cookie[8];\r\n    Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());\r\n    cookieArray0[0] = cookie0;\r\n    cookieArray0[2] = cookieArray0[1];\r\n    cookieArray0[3] = cookieArray0[2];\r\n    cookieArray0[4] = cookieArray0[3];\r\n    cookieArray0[5] = cookieArray0[4];\r\n    cookieArray0[6] = cookieArray0[5];\r\n    cookieArray0[7] = cookieArray0[6];\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"^|[.o-V N{BGP_\", \"1000000\", (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    doReturn((String) null).when(httpServletRequest0).getServerName();\r\n    doReturn(0).when(httpServletRequest0).getServerPort();\r\n    doReturn((String) null).when(httpServletRequest0).getContextPath();\r\n    doReturn(cookieArray0).when(httpServletRequest0).getCookies();\r\n    doReturn((String) null).when(httpServletRequest0).getRequestURI();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();\r\n    Cookie[] cookieArray1 = httpServletRequestWrapper0.getCookies();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    httpServletResponseWrapper0.addIntHeader(\"Trade Reset completed successfully\", 0);\r\n    pingReentryServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingReentryServlet0.init((ServletConfig) tradeConfigServlet0);\r\n}", "{\r\n    PingReentryServlet pingReentryServlet0 = new PingReentryServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"^|[.o-V N{BGP_\", \"1000000\", (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    doReturn((String) null).when(httpServletRequest0).getServerName();\r\n    doReturn(0).when(httpServletRequest0).getServerPort();\r\n    doReturn((String) null).when(httpServletRequest0).getContextPath();\r\n    doReturn((String) null).when(httpServletRequest0).getRequestURI();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingReentryServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.web.prims.PingReentryServlet", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher", "static org.junit.Assert.assertEquals", "javax.servlet.http.Cookie" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.KeyBlock" : {
      "sequences" : [ "{\r\n    KeyBlock keyBlock0 = new KeyBlock(0, 0);\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    int int0 = keyBlock_KeyBlockIterator0.nextIndex();\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock((-1), 0);\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    // Undeclared exception!\r\n    try {\r\n        keyBlock_KeyBlockIterator0.previousIndex();\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // KeyBlock: previousIndex() not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.KeyBlock$KeyBlockIterator\", e);\r\n    }\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock();\r\n    Predicate<Object> predicate0 = Predicate.isEqual((Object) keyBlock0);\r\n    boolean boolean0 = keyBlock0.removeIf(predicate0);\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    boolean boolean1 = keyBlock_KeyBlockIterator0.hasPrevious();\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock(0, 0);\r\n    Object object0 = new Object();\r\n    boolean boolean0 = keyBlock0.remove(object0);\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    // Undeclared exception!\r\n    try {\r\n        keyBlock_KeyBlockIterator0.next();\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // KeyBlock:next() -- Error KeyBlock depleted\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.KeyBlock$KeyBlockIterator\", e);\r\n    }\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock(244, (-625));\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    boolean boolean0 = keyBlock_KeyBlockIterator0.hasPrevious();\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock();\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    Object object0 = keyBlock_KeyBlockIterator0.next();\r\n    // Undeclared exception!\r\n    try {\r\n        keyBlock_KeyBlockIterator0.add(object0);\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // KeyBlock: add() not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.KeyBlock$KeyBlockIterator\", e);\r\n    }\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock();\r\n    // Undeclared exception!\r\n    try {\r\n        keyBlock0.clear();\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // KeyBlock: remove() not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.KeyBlock$KeyBlockIterator\", e);\r\n    }\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock(244, (-625));\r\n    KeyBlock keyBlock1 = new KeyBlock();\r\n    Object object0 = keyBlock1.set(244, keyBlock0);\r\n}", "{\r\n    KeyBlock keyBlock0 = new KeyBlock();\r\n    KeyBlock.KeyBlockIterator keyBlock_KeyBlockIterator0 = keyBlock0.new KeyBlockIterator();\r\n    Object object0 = keyBlock_KeyBlockIterator0.previous();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "java.util.function.Predicate", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.util.KeyBlock", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" : {
      "sequences" : [ "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean0);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    QuoteDataBean quoteDataBean1 = new QuoteDataBean(\"ZQQ2yKV*T4@3+S\", \"ZQQ2yKV*T4@3+S\", 2856, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, 2856);\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    quoteDataBean0.print();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean1 = QuoteDataBean.getRandomInstance();\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean((String) null);\r\n    BigDecimal bigDecimal0 = new BigDecimal(1059);\r\n    quoteDataBean0.setSymbol(\"1059\");\r\n    QuoteDataBean quoteDataBean1 = new QuoteDataBean(\"1059\", \"2.T`AATW^NJD}o+b} \", (-359.17), bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, 584L);\r\n    boolean boolean0 = quoteDataBean0.equals(quoteDataBean1);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    int int0 = quoteDataBean0.hashCode();\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = QuoteDataBean.getRandomInstance();\r\n    BigDecimal bigDecimal0 = new BigDecimal(0.0);\r\n    boolean boolean0 = quoteDataBean0.equals(bigDecimal0);\r\n}", "{\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    String string0 = quoteDataBean0.toHTML();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite" : {
      "sequences" : [ "{\r\n    PingJDBCWrite pingJDBCWrite0 = new PingJDBCWrite();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJDBCWrite0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingJDBCWrite pingJDBCWrite0 = new PingJDBCWrite();\r\n    pingJDBCWrite0.init((ServletConfig) pingJDBCWrite0);\r\n}", "{\r\n    PingJDBCWrite pingJDBCWrite0 = new PingJDBCWrite();\r\n    String string0 = pingJDBCWrite0.getServletInfo();\r\n}", "{\r\n    PingJDBCWrite pingJDBCWrite0 = new PingJDBCWrite();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    TradeConfig.setPrimIterations((-4500));\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJDBCWrite0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCWrite", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage" : {
      "sequences" : [ "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getKey();\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setValue(\"eC;`W6)%h:219 '*\");\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    jsonMessage0.setKey(\"eC;`W6)%h:219 '*\");\r\n}", "{\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    String string0 = jsonMessage0.getValue();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.TradeAppJSF" : {
      "sequences" : [ "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setPassword((String) null);\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.updateProfile();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getPassword();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setCpassword(\"Could not find account\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getAddress();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getCpassword();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setFullname(\"i]f=FZ\\ft\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.register();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setAddress(\"\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getUserID();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getRequest();\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeAppJSF0.logout();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.TradeAppJSF\", e);\r\n    }\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setMoney((String) null);\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setUserID(\"WCpx>\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setEmail(\")\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getResults();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    tradeAppJSF0.setCcn(\"i]f=FZ\\ft\");\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getMoney();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getEmail();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getFullname();\r\n}", "{\r\n    TradeAppJSF tradeAppJSF0 = new TradeAppJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction((TradeServices) null);\r\n    Injector.inject(tradeAppJSF0, (Class<?>) TradeAppJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(tradeAppJSF0, (Class<?>) TradeAppJSF.class);\r\n    String string0 = tradeAppJSF0.getCcn();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.TradeServices", "javax.faces.context.ExternalContext", "static org.junit.Assert.assertNull", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.TradeAction", "com.ibm.websphere.samples.daytrader.web.jsf.TradeAppJSF", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeAppServlet" : {
      "sequences" : [ "{\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    String string0 = tradeAppServlet0.getServletInfo();\r\n}", "{\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeAppServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeAppServlet\", e);\r\n    }\r\n}", "{\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    // Undeclared exception!\r\n    try {\r\n        tradeAppServlet0.doPost((HttpServletRequest) null, (HttpServletResponse) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeAppServlet\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.LoginValidator" : {
      "sequences" : [ "{\r\n    LoginValidator loginValidator0 = new LoginValidator();\r\n    TradeConfig.setTrace(true);\r\n    // Undeclared exception!\r\n    try {\r\n        loginValidator0.validate((FacesContext) null, (UIComponent) null, (Object) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.evosuite.runtime.System\", e);\r\n    }\r\n}", "{\r\n    LoginValidator loginValidator0 = new LoginValidator();\r\n    Object object0 = new Object();\r\n    try {\r\n        loginValidator0.validate((FacesContext) null, (UIComponent) null, object0);\r\n    } catch (ValidatorException e) {\r\n        // \r\n        // Username validation failed. Please provide username in this format: uid:#\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.LoginValidator\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.faces.component.UIComponent", "org.evosuite.runtime.EvoRunnerParameters", "javax.faces.context.FacesContext", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.jsf.LoginValidator", "javax.faces.validator.ValidatorException" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF" : {
      "sequences" : [ "{\r\n    OrderDataJSF orderDataJSF0 = new OrderDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    MockDate mockDate0 = new MockDate((-1034), 1823, 0, 1823, (-1034), (-1));\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData((Integer) null, \"\", mockDate0, mockDate0, bigDecimal0, \"\", 0.01, \"b'M%]adrL\", bigDecimal0);\r\n    orderDataJSF0.setOrderData(orderData0);\r\n    // Undeclared exception!\r\n    try {\r\n        Injector.executePostConstruct((Object) orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // Failed to execute @PostConstructor in com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF\r\n        // \r\n        verifyException(\"org.evosuite.runtime.javaee.injection.Injector\", e);\r\n    }\r\n}", "{\r\n    OrderDataJSF orderDataJSF0 = new OrderDataJSF();\r\n    Integer integer0 = new Integer((-260));\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn(integer0).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    OrderData[] orderDataArray0 = orderDataJSF0.getAllOrders();\r\n    Injector.validateBean(orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        Injector.executePostConstruct((Object) orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // Failed to execute @PostConstructor in com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF\r\n        // \r\n        verifyException(\"org.evosuite.runtime.javaee.injection.Injector\", e);\r\n    }\r\n}", "{\r\n    OrderDataJSF orderDataJSF0 = new OrderDataJSF();\r\n    Integer integer0 = new Integer((-1146));\r\n    MockDate mockDate0 = new MockDate((-1146));\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"<LI>      quantity:\", \"<LI>      quantity:\", mockDate0, mockDate0, (-1677.9706381), bigDecimal0, bigDecimal0, \"<LI>      quantity:\");\r\n    OrderData[] orderDataArray0 = new OrderData[6];\r\n    orderDataJSF0.setAllOrders(orderDataArray0);\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn(orderDataBean0).when(externalContext0).getSession(anyBoolean());\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        Injector.executePostConstruct((Object) orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    } catch (RuntimeException e) {\r\n        // \r\n        // Failed to execute @PostConstructor in com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF\r\n        // \r\n        verifyException(\"org.evosuite.runtime.javaee.injection.Injector\", e);\r\n    }\r\n}", "{\r\n    OrderDataJSF orderDataJSF0 = new OrderDataJSF();\r\n    ExternalContext externalContext0 = mock(ExternalContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"facesExternalContext\", (Object) externalContext0);\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(orderDataJSF0, (Class<?>) OrderDataJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(orderDataJSF0, (Class<?>) OrderDataJSF.class);\r\n    OrderData orderData0 = orderDataJSF0.getOrderData();\r\n}" ],
      "imports" : [ "javax.faces.context.ExternalContext", "static org.junit.Assert.assertNull", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "com.ibm.websphere.samples.daytrader.TradeAction", "static org.evosuite.shaded.org.mockito.Mockito.*", "com.ibm.websphere.samples.daytrader.web.jsf.OrderData", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.jsf.OrderDataJSF", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeScenarioServlet" : {
      "sequences" : [ "{\r\n    TradeScenarioServlet tradeScenarioServlet0 = new TradeScenarioServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"nNItpY1\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    tradeScenarioServlet0.performTask(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    TradeScenarioServlet tradeScenarioServlet0 = new TradeScenarioServlet();\r\n    String string0 = tradeScenarioServlet0.getServletInfo();\r\n}", "{\r\n    TradeScenarioServlet tradeScenarioServlet0 = new TradeScenarioServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    tradeScenarioServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    TradeScenarioServlet tradeScenarioServlet0 = new TradeScenarioServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    tradeScenarioServlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    TradeScenarioServlet tradeScenarioServlet0 = new TradeScenarioServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"m'ItpY1\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    tradeScenarioServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.TradeScenarioServlet" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.ActionDecoder" : {
      "sequences" : [ "{\r\n    ActionDecoder actionDecoder0 = new ActionDecoder();\r\n    TradeConfig.setTrace(true);\r\n    ActionMessage actionMessage0 = actionDecoder0.decode(\"Method enter --\");\r\n}", "{\r\n    ActionDecoder actionDecoder0 = new ActionDecoder();\r\n    boolean boolean0 = actionDecoder0.willDecode(\">z;waWFZ(HW$q<.h\");\r\n}", "{\r\n    ActionDecoder actionDecoder0 = new ActionDecoder();\r\n    actionDecoder0.destroy();\r\n}", "{\r\n    ActionDecoder actionDecoder0 = new ActionDecoder();\r\n    ActionMessage actionMessage0 = actionDecoder0.decode(\"\");\r\n}", "{\r\n    ActionDecoder actionDecoder0 = new ActionDecoder();\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    actionDecoder0.init(endpointConfig0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.websocket.EndpointConfig", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.websocket.ActionDecoder" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" : {
      "sequences" : [ "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    QuoteDataBean quoteDataBean0 = orderDataBean0.getQuote();\r\n}", "{\r\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\r\n    MockDate mockDate0 = new MockDate(4739, 4739, Integer.MAX_VALUE, 0, 4739, (-1709));\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"g%?+LW:\\\"*c|*y\", \"g%?+LW:\\\"*c|*y\", mockDate0, mockDate0, Integer.MAX_VALUE, bigDecimal0, bigDecimal0, \"g%?+LW:\\\"*c|*y\");\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isBuy();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate(1143, 1143, 1143, 1143, 1143, 1143);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"\");\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"<LI>      orderType: \", \"<LI>      orderType: \", mockDate0, mockDate0, 1143, bigDecimal0, bigDecimal0, (AccountDataBean) null, quoteDataBean0, holdingDataBean0);\r\n    String string0 = orderDataBean0.getSymbol();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    orderDataBean0.print();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    AccountDataBean accountDataBean0 = orderDataBean0.getAccount();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean0 = orderDataBean0.getHolding();\r\n}", "{\r\n    MockDate mockDate0 = new MockDate((-329), (-329), (-329), (-329), (-1));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean((-1), (-1), mockDate0, mockDate0, (BigDecimal) null, (BigDecimal) null, \"sell\");\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean();\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(\"sell\", \"sell\", mockDate0, mockDate0, (-1773.0), (BigDecimal) null, (BigDecimal) null, accountDataBean0, quoteDataBean0, holdingDataBean0);\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean0);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isOpen();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    String string0 = orderDataBean0.toHTML();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCancelled();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.equals(\"<BR>Order <B>30000</B><LI>      orderType: sell</LI><LI>    orderStatus: open</LI><LI>       openDate: Sat Jan 10 22:36:33 GMT 1970</LI><LI> completionDate: Tue Jan 13 10:15:41 GMT 1970</LI><LI>       quantity: 121.0</LI><LI>          price: 700.00</LI><LI>       orderFee: 800.00</LI><LI>         symbol: s:8999</LI>\");\r\n}", "{\r\n    OrderDataBean orderDataBean0 = OrderDataBean.getRandomInstance();\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    orderDataBean0.setOrderType(\"<LI>       orderFee: \");\r\n    boolean boolean0 = orderDataBean0.isSell();\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    Integer integer0 = Integer.getInteger(\"WebInterface\", (-1322));\r\n    orderDataBean0.setOrderID(integer0);\r\n    OrderDataBean orderDataBean1 = new OrderDataBean();\r\n    boolean boolean0 = orderDataBean0.equals(orderDataBean1);\r\n}", "{\r\n    OrderDataBean orderDataBean0 = new OrderDataBean();\r\n    int int0 = orderDataBean0.hashCode();\r\n}", "{\r\n    Integer integer0 = new Integer(884);\r\n    MockDate mockDate0 = new MockDate(884, 115, 884, 884, (-1477));\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderDataBean orderDataBean0 = new OrderDataBean(integer0, \"6h]v)v4nDl nC>\", \"6h]v)v4nDl nC>\", mockDate0, mockDate0, 115, bigDecimal0, bigDecimal0, \"6h]v)v4nDl nC>\");\r\n    orderDataBean0.cancel();\r\n    boolean boolean0 = orderDataBean0.isCompleted();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF" : {
      "sequences" : [ "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    quoteJSF0.setSymbols(\"\");\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    quoteJSF0.setDataTable((HtmlDataTable) null);\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    HtmlDataTable htmlDataTable0 = quoteJSF0.getDataTable();\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    // Undeclared exception!\r\n    try {\r\n        quoteJSF0.buy();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF\", e);\r\n    }\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    Integer integer0 = new Integer(0);\r\n    quoteJSF0.setQuantity(integer0);\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    // Undeclared exception!\r\n    try {\r\n        quoteJSF0.getAllQuotes();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF\", e);\r\n    }\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    QuoteData[] quoteDataArray0 = quoteJSF0.getQuotes();\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    Integer integer0 = quoteJSF0.getQuantity();\r\n}", "{\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    QuoteData[] quoteDataArray0 = new QuoteData[0];\r\n    quoteJSF0.setQuotes(quoteDataArray0);\r\n}", "{\r\n    QuoteJSF quoteJSF0 = new QuoteJSF();\r\n    String string0 = quoteJSF0.getSymbols();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteJSF", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.TradeAction", "javax.faces.component.html.HtmlDataTable", "org.evosuite.runtime.EvoRunnerParameters", "javax.faces.context.FacesContext", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder" : {
      "sequences" : [ "{\r\n    JsonDecoder jsonDecoder0 = new JsonDecoder();\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    jsonDecoder0.init(endpointConfig0);\r\n}", "{\r\n    JsonDecoder jsonDecoder0 = new JsonDecoder();\r\n    boolean boolean0 = jsonDecoder0.willDecode((String) null);\r\n}", "{\r\n    JsonDecoder jsonDecoder0 = new JsonDecoder();\r\n    jsonDecoder0.destroy();\r\n}", "{\r\n    JsonDecoder jsonDecoder0 = new JsonDecoder();\r\n    // Undeclared exception!\r\n    try {\r\n        jsonDecoder0.decode(\"\");\r\n    } catch (JsonException e) {\r\n        // \r\n        // Provider org.glassfish.json.JsonProviderImpl not found\r\n        // \r\n        verifyException(\"javax.json.spi.JsonProvider\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.json.JsonException", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingSession1" : {
      "sequences" : [ "{\r\n    PingSession1 pingSession1_0 = new PingSession1();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher();\r\n    pingSession1_0.init((ServletConfig) tJWSServletDispatcher0);\r\n}", "{\r\n    PingSession1 pingSession1_0 = new PingSession1();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession1_0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession1 pingSession1_0 = new PingSession1();\r\n    String string0 = pingSession1_0.getServletInfo();\r\n}", "{\r\n    PingSession1 pingSession1_0 = new PingSession1();\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(httpSession0).getAttribute(anyString());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession1_0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession1 pingSession1_0 = new PingSession1();\r\n    Integer integer0 = new Integer(0);\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    doReturn(integer0).when(httpSession0).getAttribute(anyString());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession1_0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.http.HttpSession", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingSession1", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingSession3" : {
      "sequences" : [ "{\r\n    PingSession3 pingSession3_0 = new PingSession3();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"L~5a00=\").when(httpServletRequest0).getParameter(anyString());\r\n    doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession3_0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession3 pingSession3_0 = new PingSession3();\r\n    pingSession3_0.init((ServletConfig) pingSession3_0);\r\n}", "{\r\n    PingSession3 pingSession3_0 = new PingSession3();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(httpServletRequest0).getParameter(anyString());\r\n    doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession3_0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession3 pingSession3_0 = new PingSession3();\r\n    String string0 = pingSession3_0.getServletInfo();\r\n}", "{\r\n    PingSession3 pingSession3_0 = new PingSession3();\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher\").when(httpServletRequest0).getParameter(anyString());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession3_0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.http.HttpSession", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingSession3", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingSession2" : {
      "sequences" : [ "{\r\n    PingSession2 pingSession2_0 = new PingSession2();\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(httpSession0).getAttribute(anyString());\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    pingSession2_0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession2 pingSession2_0 = new PingSession2();\r\n    SimpleSecurityDomain simpleSecurityDomain0 = new SimpleSecurityDomain();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher(simpleSecurityDomain0);\r\n    pingSession2_0.init((ServletConfig) tJWSServletDispatcher0);\r\n}", "{\r\n    PingSession2 pingSession2_0 = new PingSession2();\r\n    Integer integer0 = new Integer(4);\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    doReturn(integer0).when(httpSession0).getAttribute(anyString());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingSession2_0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingSession2 pingSession2_0 = new PingSession2();\r\n    String string0 = pingSession2_0.getServletInfo();\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.http.HttpSession", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "org.jboss.resteasy.plugins.server.embedded.SimpleSecurityDomain", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingSession2", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeServletAction" : {
      "sequences" : [ "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeServletAction0.doMarketSummary((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"\\n\\t\\t   fullName:\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    try {\r\n        tradeServletAction0.doHome((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, (String) null, \"TradeServletAction.doHome(...)Error finding account for user \");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doHome(...) exception user =null\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    Integer integer0 = new Integer((-1));\r\n    try {\r\n        tradeServletAction0.doSell((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"\", integer0);\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doSell(...) exception selling holding -1 for user =\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    try {\r\n        tradeServletAction0.doAccountUpdate((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"\\n\\tAccount Data for account: \", \"\\n\\tAccount Data for account: \", \"\\n\\tAccount Data for account: \", \"\\n\\tAccount Data for account: \", \"Q5^[X\\\"_+\", \")x8\", \"P]P%@tq>[v-lp\");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doAccountUpdate(...) exception user =\r\n        // \\tAccount Data for account:\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeServletAction0.doQuotes((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"@Pwv\", (String) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    try {\r\n        tradeServletAction0.doAccountUpdate((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"\", \"\", \"\", \"\", \"GOvB@F8VD\", \"\", \"t|q1\");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doAccount(...) exception user =\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    try {\r\n        tradeServletAction0.doRegister((ServletContext) null, (HttpServletRequest) null, (HttpServletResponse) null, \"\", \"\", \"\", \"\", \"eb_`\", \"eb_`\", \"\", \"\");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doRegister(...) exception user =\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    try {\r\n        tradeServletAction0.doRegister((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"TradeConfig.setConfigParm(...) minor exception caughtSetting max_quotes, error parsing string to int \", \"\", \"TradeConfig.setConfigParm(...) minor exception caughtSetting max_quotes, error parsing string to int \", \"\", \"\", \"\", \"\", \"TradeConfig.setConfigParm(...) minor exception caughtSetting max_quotes, error parsing string to int \");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doRegister(...) exception user =TradeConfig.setConfigParm(...) minor exception caughtSetting max_quotes, error parsing string to int\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    try {\r\n        tradeServletAction0.doRegister((ServletContext) null, httpServletRequestWrapper0, (HttpServletResponse) null, \"\", \"TradeServletAction.doLogin(...)Exception logging in user \", \"TradeServletAction.doLogin(...)Exception logging in user \", \"TradeServletAction.doBuy(...)\", \"E2>N*9fjo\", \"*p;aZGkqR]\\\"b)CJVy\", \"cW1;dN32;\\\"jSma8\", \"*p;aZGkqR]\\\"b)CJVy\");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doRegister(...) exception user =\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeServletAction0.doBuy((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, (String) null, \"results\", \"results\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    try {\r\n        tradeServletAction0.doAccountUpdate((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"Method enter --\", \"Method enter --\", \"sD\", \"sD\", \"(2r5Ydyn~k;qC8a!v\", \"\", \"\");\r\n    } catch (ServletException e) {\r\n        // \r\n        // TradeServletAction.doAccount(...) exception user =Method enter --\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}", "{\r\n    TradeServletAction tradeServletAction0 = new TradeServletAction();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        tradeServletAction0.doWelcome((ServletContext) null, httpServletRequestWrapper0, httpServletResponseWrapper0, \"\");\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.TradeServletAction\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.ServletException", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.TradeServletAction", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "javax.servlet.ServletContext", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet" : {
      "sequences" : [ "{\r\n    PingUpgradeServlet.Handler pingUpgradeServlet_Handler0 = new PingUpgradeServlet.Handler();\r\n    pingUpgradeServlet_Handler0.destroy();\r\n}", "{\r\n    PingUpgradeServlet pingUpgradeServlet0 = new PingUpgradeServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingUpgradeServlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet\", e);\r\n    }\r\n}", "{\r\n    PingUpgradeServlet pingUpgradeServlet0 = new PingUpgradeServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    TradeConfig.setTrace(true);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingUpgradeServlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet\", e);\r\n    }\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    PingUpgradeServlet.Handler pingUpgradeServlet_Handler0 = new PingUpgradeServlet.Handler();\r\n    WebConnection webConnection0 = mock(WebConnection.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletInputStream) null).when(webConnection0).getInputStream();\r\n    doReturn((ServletOutputStream) null, (ServletOutputStream) null).when(webConnection0).getOutputStream();\r\n    // Undeclared exception!\r\n    try {\r\n        pingUpgradeServlet_Handler0.init(webConnection0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet$Handler\", e);\r\n    }\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    PingUpgradeServlet.Handler pingUpgradeServlet_Handler0 = new PingUpgradeServlet.Handler();\r\n    pingUpgradeServlet_Handler0.destroy();\r\n}", "{\r\n    PingUpgradeServlet.Handler pingUpgradeServlet_Handler0 = new PingUpgradeServlet.Handler();\r\n    WebConnection webConnection0 = mock(WebConnection.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletInputStream) null).when(webConnection0).getInputStream();\r\n    doReturn((ServletOutputStream) null, (ServletOutputStream) null).when(webConnection0).getOutputStream();\r\n    // Undeclared exception!\r\n    try {\r\n        pingUpgradeServlet_Handler0.init(webConnection0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet$Handler\", e);\r\n    }\r\n}", "{\r\n    PingUpgradeServlet pingUpgradeServlet0 = new PingUpgradeServlet();\r\n    TradeConfig.setTrace(true);\r\n    PingUpgradeServlet.Handler pingUpgradeServlet_Handler0 = new PingUpgradeServlet.Handler();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"echo\").when(httpServletRequest0).getHeader(anyString());\r\n    doReturn(pingUpgradeServlet_Handler0).when(httpServletRequest0).upgrade(nullable(java.lang.Class.class));\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingUpgradeServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingUpgradeServlet pingUpgradeServlet0 = new PingUpgradeServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"echo\").when(httpServletRequest0).getHeader(anyString());\r\n    doReturn((HttpUpgradeHandler) null).when(httpServletRequest0).upgrade(nullable(java.lang.Class.class));\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingUpgradeServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "static org.junit.Assert.assertNull", "javax.servlet.ServletInputStream", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpUpgradeHandler", "javax.servlet.http.HttpServletRequest", "com.ibm.websphere.samples.daytrader.web.prims.PingUpgradeServlet", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "javax.servlet.http.WebConnection", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.OrdersAlertFilter" : {
      "sequences" : [ "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.init(filterConfig0);\r\n    HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(httpSession0).getAttribute(anyString());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"YUc>\").when(httpServletRequest0).getParameter(anyString());\r\n    doReturn(httpSession0).when(httpServletRequest0).getSession();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.init(filterConfig0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"login\", \"logout\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.init(filterConfig0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"login\", \"logout\", \"\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n    FilterChain filterChain1 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain1);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.init(filterConfig0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"login\", \"logout\", (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n    FilterChain filterChain1 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain1);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    TradeConfig.setDisplayOrderAlerts(false);\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.init(filterConfig0);\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    ordersAlertFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);\r\n}", "{\r\n    OrdersAlertFilter ordersAlertFilter0 = new OrdersAlertFilter();\r\n    ordersAlertFilter0.destroy();\r\n}" ],
      "imports" : [ "javax.servlet.http.HttpSession", "javax.servlet.FilterChain", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "com.ibm.websphere.samples.daytrader.web.OrdersAlertFilter", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.FilterConfig", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet" : {
      "sequences" : [ "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"updateConfig\", (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    tradeConfigServlet0.service((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    tradeConfigServlet0.service((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"\", \"\", \"k\", \"k\", \"\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    tradeConfigServlet0.doConfigUpdate(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"resetTrade\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    tradeConfigServlet0.service((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"marketSummaryInterval\", \"buildDB\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    tradeConfigServlet0.service((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);\r\n    tradeConfigServlet0.service((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null, \"1\", \"LOG4J\", (String) null, \"1\").when(httpServletRequest0).getParameter(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    tradeConfigServlet0.doConfigUpdate(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n    tradeConfigServlet0.doConfigUpdate(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n}", "{\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    tradeConfigServlet0.init((ServletConfig) tradeAppServlet0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.PortfolioJSF" : {
      "sequences" : [ "{\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    BigDecimal bigDecimal0 = portfolioJSF0.getBalance();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n}", "{\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    ArrayList<HoldingData> arrayList0 = portfolioJSF0.getHoldingDatas();\r\n}", "{\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    BigDecimal bigDecimal0 = portfolioJSF0.getTotalValue();\r\n}", "{\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    BigDecimal bigDecimal0 = portfolioJSF0.getHoldingsTotal();\r\n}", "{\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    portfolioJSF0.setTotalGainPercent(bigDecimal0);\r\n}", "{\r\n    PortfolioJSF portfolioJSF0 = new PortfolioJSF();\r\n    FacesContext facesContext0 = FacesContext.getCurrentInstance();\r\n    String string0 = portfolioJSF0.getTotalGainPercentHTML();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "java.util.ArrayList", "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.TradeAction", "com.ibm.websphere.samples.daytrader.web.jsf.HoldingData", "org.evosuite.runtime.EvoRunnerParameters", "javax.faces.context.FacesContext", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.jsf.PortfolioJSF", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Jsp" : {
      "sequences" : [ "{\r\n    PingServlet2Jsp pingServlet2Jsp0 = new PingServlet2Jsp();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2Jsp0.doPost((HttpServletRequest) null, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Jsp", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" : {
      "sequences" : [ "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"\", \"\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean0);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"\", \"\");\r\n    int int0 = accountProfileDataBean0.hashCode();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    boolean boolean0 = accountProfileDataBean0.equals(\"\\n\\tAccount Profile Data for userID:null\\n\\t\\t   passwd:null\\n\\t\\t   fullName:null\\n\\t\\t    address:null\\n\\t\\t      email:null\\n\\t\\t creditCard:null\");\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    AccountDataBean accountDataBean0 = accountProfileDataBean0.getAccount();\r\n}", "{\r\n    // Undeclared exception!\r\n    AccountProfileDataBean.getRandomInstance();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"LNik2eDH/L\", \"\", \"\");\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean();\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    accountProfileDataBean0.setAccount((AccountDataBean) null);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean(\"\", \"\", \"/register.jsp\", \"\", \"\", \"\");\r\n    boolean boolean0 = accountProfileDataBean0.equals(accountProfileDataBean1);\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean(\"y%q&a\", (String) null, \"O${T9&[$-@k#sI4%b\", \"O${T9&[$-@k#sI4%b\", \"|.Ex;A{5SbuU -cyZi\", \"u?.og\\\"\");\r\n    accountProfileDataBean0.print();\r\n}", "{\r\n    AccountProfileDataBean accountProfileDataBean0 = new AccountProfileDataBean();\r\n    String string0 = accountProfileDataBean0.toHTML();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.ejb3.DTStreamer3MDB" : {
      "sequences" : [ "{\r\n    DTStreamer3MDB dTStreamer3MDB0 = new DTStreamer3MDB();\r\n    Injector.injectEvent(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    Injector.validateBean(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(\"!/cux\\\"a\").when(message0).getStringProperty(anyString());\r\n    dTStreamer3MDB0.onMessage(message0);\r\n}", "{\r\n    DTStreamer3MDB dTStreamer3MDB0 = new DTStreamer3MDB();\r\n    Injector.injectEvent(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    Injector.validateBean(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(0L).when(message0).getLongProperty(anyString());\r\n    doReturn(\"updateQuote\", (String) null).when(message0).getStringProperty(anyString());\r\n    dTStreamer3MDB0.onMessage(message0);\r\n}", "{\r\n    DTStreamer3MDB dTStreamer3MDB0 = new DTStreamer3MDB();\r\n    Injector.injectEvent(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    Injector.validateBean(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(message0).toString();\r\n    doReturn((String) null).when(message0).getStringProperty(anyString());\r\n    dTStreamer3MDB0.onMessage(message0);\r\n}", "{\r\n    DTStreamer3MDB dTStreamer3MDB0 = new DTStreamer3MDB();\r\n    Injector.injectEvent(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    Injector.validateBean(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn((-3323L)).when(message0).getLongProperty(anyString());\r\n    doReturn(\"ping\").when(message0).getStringProperty(anyString());\r\n    dTStreamer3MDB0.onMessage(message0);\r\n}", "{\r\n    DTStreamer3MDB dTStreamer3MDB0 = new DTStreamer3MDB();\r\n    Injector.injectEvent(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    Injector.validateBean(dTStreamer3MDB0, (Class<?>) DTStreamer3MDB.class);\r\n    TradeConfig.setTrace(true);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    dTStreamer3MDB0.onMessage(message0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "com.ibm.websphere.samples.daytrader.ejb3.DTStreamer3MDB", "static org.junit.Assert.*", "javax.ejb.MessageDrivenContext", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "javax.jms.Message" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2IncludeRcv" : {
      "sequences" : [ "{\r\n    PingServlet2IncludeRcv pingServlet2IncludeRcv0 = new PingServlet2IncludeRcv();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2IncludeRcv0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2IncludeRcv", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.ejb3.DTBroker3MDB" : {
      "sequences" : [ "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(true, true).when(message0).getBooleanProperty(anyString());\r\n    doReturn((-1796536052)).when(message0).getIntProperty(anyString());\r\n    doReturn(false).when(message0).getJMSRedelivered();\r\n    doReturn((long) (-1796536052)).when(message0).getLongProperty(anyString());\r\n    doReturn(\"neworder\").when(message0).getStringProperty(anyString());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(message0).toString();\r\n    doReturn(false).when(message0).getJMSRedelivered();\r\n    doReturn((String) null).when(message0).getStringProperty(anyString());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(false).when(message0).getJMSRedelivered();\r\n    doReturn(\"0\").when(message0).getStringProperty(anyString());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    TradeConfig.setTrace(true);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(false).when(message0).getJMSRedelivered();\r\n    doReturn(0L).when(message0).getLongProperty(anyString());\r\n    doReturn(\"ping\").when(message0).getStringProperty(anyString());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    doReturn((OrderDataBean) null).when(tradeSLSBLocal0).completeOrder(anyInt(), anyBoolean());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(false, false).when(message0).getBooleanProperty(anyString());\r\n    doReturn(0).when(message0).getIntProperty(anyString());\r\n    doReturn(false).when(message0).getJMSRedelivered();\r\n    doReturn(0L).when(message0).getLongProperty(anyString());\r\n    doReturn(\"neworder\").when(message0).getStringProperty(anyString());\r\n    dTBroker3MDB0.onMessage(message0);\r\n}", "{\r\n    DTBroker3MDB dTBroker3MDB0 = new DTBroker3MDB();\r\n    MessageDrivenContext messageDrivenContext0 = mock(MessageDrivenContext.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"mdc\", (Object) messageDrivenContext0);\r\n    TradeSLSBLocal tradeSLSBLocal0 = mock(TradeSLSBLocal.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class, \"tradeSLSB\", (Object) tradeSLSBLocal0);\r\n    Injector.validateBean(dTBroker3MDB0, (Class<?>) DTBroker3MDB.class);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    doReturn(true).when(message0).getJMSRedelivered();\r\n    dTBroker3MDB0.onMessage(message0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.ejb3.DTBroker3MDB", "javax.ejb.MessageDrivenContext", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "javax.jms.Message", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.RecentStockChangeList" : {
      "sequences" : [ "{\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    RecentStockChangeList.addStockChange(message0);\r\n}", "{\r\n    boolean boolean0 = RecentStockChangeList.isEmpty();\r\n}", "{\r\n    RecentStockChangeList recentStockChangeList0 = new RecentStockChangeList();\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "javax.jms.Message", "com.ibm.websphere.samples.daytrader.web.websocket.RecentStockChangeList" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder" : {
      "sequences" : [ "{\r\n    JsonEncoder jsonEncoder0 = new JsonEncoder();\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    jsonEncoder0.init(endpointConfig0);\r\n}", "{\r\n    JsonEncoder jsonEncoder0 = new JsonEncoder();\r\n    jsonEncoder0.destroy();\r\n}", "{\r\n    JsonEncoder jsonEncoder0 = new JsonEncoder();\r\n    JsonMessage jsonMessage0 = new JsonMessage();\r\n    // Undeclared exception!\r\n    try {\r\n        jsonEncoder0.encode(jsonMessage0);\r\n    } catch (JsonException e) {\r\n        // \r\n        // Provider org.glassfish.json.JsonProviderImpl not found\r\n        // \r\n        verifyException(\"javax.json.spi.JsonProvider\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder", "com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.json.JsonException", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingInterceptor" : {
      "sequences" : [ "{\r\n    PingInterceptor pingInterceptor0 = new PingInterceptor();\r\n    InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(invocationContext0).proceed();\r\n    Object object0 = pingInterceptor0.methodInterceptor(invocationContext0);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.prims.PingInterceptor", "static org.junit.Assert.assertNull", "static org.evosuite.shaded.org.mockito.Mockito.*", "javax.interceptor.InvocationContext", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.OrderData" : {
      "sequences" : [ "{\r\n    Integer integer0 = new Integer(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", (Date) null, (Date) null, bigDecimal0, \"\", 1.0, \"\", bigDecimal0);\r\n    String string0 = orderData0.getOrderStatus();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-653));\r\n    RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;\r\n    MathContext mathContext0 = new MathContext(0, roundingMode0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(999L, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, \"3zFO\", mockDate0, mockDate0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1.0), \"3zFO\", bigDecimal0);\r\n    orderData0.setOrderID(integer0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-741), 1, (-741), (-1), 0);\r\n    BigInteger bigInteger0 = BigInteger.valueOf((-1));\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"\", 0, \"*8CtIl\");\r\n    String string0 = orderData0.getSymbol();\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", mockDate0, mockDate0, (BigDecimal) null, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1), \"\", bigDecimal0);\r\n    Date date0 = orderData0.getOpenDate();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    orderData0.setSymbol((String) null);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    orderData0.setQuantity(0.0);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    orderData0.setOrderFee(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", mockDate0, mockDate0, (BigDecimal) null, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1), \"\", bigDecimal0);\r\n    double double0 = orderData0.getQuantity();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getTotal();\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", mockDate0, mockDate0, (BigDecimal) null, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1), \"\", bigDecimal0);\r\n    orderData0.setOrderStatus(\"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\");\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", mockDate0, mockDate0, (BigDecimal) null, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1), \"\", bigDecimal0);\r\n    orderData0.setTotal((BigDecimal) null);\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    BigDecimal bigDecimal0 = new BigDecimal((double) 1);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", (Date) null, (Date) null, bigDecimal0, \"\", 1.0, \"\", bigDecimal0);\r\n    orderData0.setOpenDate((Date) null);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-741), 1, (-741), (-1), 0);\r\n    BigInteger bigInteger0 = BigInteger.valueOf((-1));\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"\", 0, \"*8CtIl\");\r\n    Date date0 = orderData0.getCompletionDate();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate((-741), 1, (-741), (-1), 0);\r\n    BigInteger bigInteger0 = BigInteger.valueOf((-1));\r\n    BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"\", 0, \"*8CtIl\");\r\n    Integer integer1 = orderData0.getOrderID();\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate();\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    OrderData orderData0 = new OrderData(integer0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", mockDate0, mockDate0, (BigDecimal) null, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1), \"\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getPrice();\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-653));\r\n    RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;\r\n    MathContext mathContext0 = new MathContext(0, roundingMode0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(999L, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, \"3zFO\", mockDate0, mockDate0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1.0), \"3zFO\", bigDecimal0);\r\n    orderData0.setPrice(bigDecimal0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-653));\r\n    RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;\r\n    MathContext mathContext0 = new MathContext(0, roundingMode0);\r\n    BigDecimal bigDecimal0 = new BigDecimal(999L, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, \"3zFO\", mockDate0, mockDate0, bigDecimal0, \"com.ibm.websphere.samples.daytrader.web.jsf.OrderData\", (-1.0), \"3zFO\", bigDecimal0);\r\n    BigDecimal bigDecimal1 = orderData0.getOrderFee();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    orderData0.setOrderType(\"B5-wu+6Pk!(fO)ZF]MW\");\r\n}", "{\r\n    Integer integer0 = new Integer((-1));\r\n    MockDate mockDate0 = new MockDate((-1));\r\n    BigDecimal bigDecimal0 = new BigDecimal((long) (-1));\r\n    OrderData orderData0 = new OrderData(integer0, \"\", mockDate0, mockDate0, bigDecimal0, \"?yx,xAlr 3%I\", (-1), \"?yx,xAlr 3%I\");\r\n    String string0 = orderData0.getOrderType();\r\n}", "{\r\n    Integer integer0 = new Integer(1);\r\n    MockDate mockDate0 = new MockDate(1, (-1307), (-1307), 1, (-1307));\r\n    MathContext mathContext0 = MathContext.DECIMAL128;\r\n    BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);\r\n    OrderData orderData0 = new OrderData(integer0, (String) null, mockDate0, mockDate0, bigDecimal0, (String) null, (-2866.31116887), (String) null, bigDecimal0);\r\n    orderData0.setCompletionDate(mockDate0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "java.math.MathContext", "java.util.Date", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "com.ibm.websphere.samples.daytrader.web.jsf.OrderData", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.math.BigInteger", "static org.junit.Assert.assertEquals", "java.math.RoundingMode" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.direct.KeySequenceDirect" : {
      "sequences" : [ "{\r\n    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());\r\n    try {\r\n        KeySequenceDirect.getNextID(connection0, \"Standard\", false, false);\r\n    } catch (Exception e) {\r\n        // \r\n        // KeySequenceDirect:allocNewBlock - failure to allocate new block of keys for Entity type: Standardjava.lang.NullPointerException\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.KeySequenceDirect\", e);\r\n    }\r\n}", "{\r\n    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());\r\n    try {\r\n        KeySequenceDirect.getNextID(connection0, \"!as&Y\", true, true);\r\n    } catch (Exception e) {\r\n        // \r\n        // KeySequenceDirect:allocNewBlock - failure to allocate new block of keys for Entity type: !as&Yjava.lang.NullPointerException\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.KeySequenceDirect\", e);\r\n    }\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());\r\n    Integer integer0 = KeySequenceDirect.getNextID(connection0, \" ID=\", true, false);\r\n}", "{\r\n    KeySequenceDirect keySequenceDirect0 = new KeySequenceDirect();\r\n}", "{\r\n    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());\r\n    Integer integer0 = KeySequenceDirect.getNextID(connection0, \" ID=\", true, false);\r\n}", "{\r\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\r\n    doReturn(0).when(resultSet0).getInt(anyString());\r\n    doReturn(true).when(resultSet0).next();\r\n    PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());\r\n    doReturn(resultSet0).when(preparedStatement0).executeQuery();\r\n    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());\r\n    doReturn(preparedStatement0, (PreparedStatement) null).when(connection0).prepareStatement(anyString());\r\n    try {\r\n        KeySequenceDirect.getNextID(connection0, \" la4t\", true, false);\r\n    } catch (Exception e) {\r\n        // \r\n        // KeySequenceDirect:allocNewBlock - failure to allocate new block of keys for Entity type:  la4tjava.lang.NullPointerException\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.KeySequenceDirect\", e);\r\n    }\r\n}" ],
      "imports" : [ "java.sql.Connection", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.sql.PreparedStatement", "static org.evosuite.shaded.org.mockito.Mockito.*", "com.ibm.websphere.samples.daytrader.direct.KeySequenceDirect", "org.evosuite.runtime.EvoRunnerParameters", "java.sql.ResultSet", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingManagedThread" : {
      "sequences" : [ "{\r\n    PingManagedThread pingManagedThread0 = new PingManagedThread();\r\n    ManagedThreadFactory managedThreadFactory0 = mock(ManagedThreadFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingManagedThread0, (Class<?>) PingManagedThread.class, \"managedThreadFactory\", (Object) managedThreadFactory0);\r\n    Injector.validateBean(pingManagedThread0, (Class<?>) PingManagedThread.class);\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    pingManagedThread0.init((ServletConfig) tradeAppServlet0);\r\n}", "{\r\n    PingManagedThread pingManagedThread0 = new PingManagedThread();\r\n    ManagedThreadFactory managedThreadFactory0 = mock(ManagedThreadFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingManagedThread0, (Class<?>) PingManagedThread.class, \"managedThreadFactory\", (Object) managedThreadFactory0);\r\n    Injector.validateBean(pingManagedThread0, (Class<?>) PingManagedThread.class);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((AsyncContext) null).when(httpServletRequest0).startAsync();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingManagedThread0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingManagedThread pingManagedThread0 = new PingManagedThread();\r\n    ManagedThreadFactory managedThreadFactory0 = mock(ManagedThreadFactory.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingManagedThread0, (Class<?>) PingManagedThread.class, \"managedThreadFactory\", (Object) managedThreadFactory0);\r\n    Injector.validateBean(pingManagedThread0, (Class<?>) PingManagedThread.class);\r\n    String string0 = pingManagedThread0.getServletInfo();\r\n}" ],
      "imports" : [ "javax.enterprise.concurrent.ManagedThreadFactory", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.AsyncContext", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "com.ibm.websphere.samples.daytrader.web.prims.PingManagedThread", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaCDICurrent" : {
      "sequences" : [ "{\r\n    PingServletCDIBeanManagerViaCDICurrent pingServletCDIBeanManagerViaCDICurrent0 = new PingServletCDIBeanManagerViaCDICurrent();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDIBeanManagerViaCDICurrent0, (Class<?>) PingServletCDIBeanManagerViaCDICurrent.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    Injector.validateBean(pingServletCDIBeanManagerViaCDICurrent0, (Class<?>) PingServletCDIBeanManagerViaCDICurrent.class);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServletCDIBeanManagerViaCDICurrent0.doGet((HttpServletRequest) null, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaCDICurrent\", e);\r\n    }\r\n}", "{\r\n    PingServletCDIBeanManagerViaCDICurrent pingServletCDIBeanManagerViaCDICurrent0 = new PingServletCDIBeanManagerViaCDICurrent();\r\n    PingCDIBean pingCDIBean0 = new PingCDIBean();\r\n    Injector.inject(pingServletCDIBeanManagerViaCDICurrent0, (Class<?>) PingServletCDIBeanManagerViaCDICurrent.class, \"cdiBean\", (Object) pingCDIBean0);\r\n    Injector.validateBean(pingServletCDIBeanManagerViaCDICurrent0, (Class<?>) PingServletCDIBeanManagerViaCDICurrent.class);\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    pingServletCDIBeanManagerViaCDICurrent0.init((ServletConfig) tradeAppServlet0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "com.ibm.websphere.samples.daytrader.web.prims.PingServletCDIBeanManagerViaCDICurrent", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage" : {
      "sequences" : [ "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    actionMessage0.decodedAction = null;\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.decodedAction = \"first:\";\r\n    actionMessage0.doDecoding((String) null);\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    String string0 = actionMessage0.getDecodedAction();\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    actionMessage0.doDecoding(\"\");\r\n}", "{\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    TradeConfig.setTrace(true);\r\n    actionMessage0.doDecoding((String) null);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "org.junit.Test", "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.ExplicitGC" : {
      "sequences" : [ "{\r\n    ExplicitGC explicitGC0 = new ExplicitGC();\r\n    String string0 = explicitGC0.getServletInfo();\r\n}", "{\r\n    ExplicitGC explicitGC0 = new ExplicitGC();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    explicitGC0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    ExplicitGC explicitGC0 = new ExplicitGC();\r\n    TestServlet testServlet0 = new TestServlet();\r\n    explicitGC0.init((ServletConfig) testServlet0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.TestServlet", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.ExplicitGC" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean" : {
      "sequences" : [ "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean0);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    holdingDataBean0.print();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    HoldingDataBean holdingDataBean1 = HoldingDataBean.getRandomInstance();\r\n    boolean boolean0 = holdingDataBean0.equals(holdingDataBean1);\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean1 = HoldingDataBean.getRandomInstance();\r\n    HoldingDataBean holdingDataBean2 = HoldingDataBean.getRandomInstance();\r\n    boolean boolean0 = holdingDataBean2.equals(holdingDataBean0);\r\n}", "{\r\n    Integer integer0 = new Integer(0);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-2782));\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(integer0, 0, bigDecimal0, mockDate0, \"\");\r\n    boolean boolean0 = holdingDataBean0.equals(\"\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    MockDate mockDate0 = new MockDate((-1355), 0, (-1355), 0, 0, (-1355));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"?.Lzo0*ZxM]p\");\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"<LI> completionDate: \", \"?.Lzo0*ZxM]p\", (-1355), bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, 0.0);\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(0.0, bigDecimal0, mockDate0, accountDataBean0, quoteDataBean0);\r\n    AccountDataBean accountDataBean1 = holdingDataBean0.getAccount();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    QuoteDataBean quoteDataBean0 = holdingDataBean0.getQuote();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    int int0 = holdingDataBean0.hashCode();\r\n}", "{\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean();\r\n    HoldingDataBean holdingDataBean1 = HoldingDataBean.getRandomInstance();\r\n    boolean boolean0 = holdingDataBean1.equals(holdingDataBean0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    MockDate mockDate0 = new MockDate((-1355), 0, (-1355), 0, 0, (-1355));\r\n    AccountDataBean accountDataBean0 = new AccountDataBean(0, 0, mockDate0, mockDate0, bigDecimal0, bigDecimal0, \"?.Lzo0*ZxM]p\");\r\n    QuoteDataBean quoteDataBean0 = new QuoteDataBean(\"<LI> completionDate: \", \"?.Lzo0*ZxM]p\", (-1355), bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, 0.0);\r\n    HoldingDataBean holdingDataBean0 = new HoldingDataBean(0.0, bigDecimal0, mockDate0, accountDataBean0, quoteDataBean0);\r\n    String string0 = holdingDataBean0.toHTML();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "org.evosuite.runtime.mock.java.util.MockDate", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2ServletRcv" : {
      "sequences" : [ "{\r\n    PingServlet2ServletRcv pingServlet2ServletRcv0 = new PingServlet2ServletRcv();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2ServletRcv0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2ServletRcv pingServlet2ServletRcv0 = new PingServlet2ServletRcv();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher();\r\n    pingServlet2ServletRcv0.init((ServletConfig) tJWSServletDispatcher0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2ServletRcv", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet30Async" : {
      "sequences" : [ "{\r\n    PingServlet30Async pingServlet30Async0 = new PingServlet30Async();\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingServlet30Async0.init((ServletConfig) tradeConfigServlet0);\r\n}", "{\r\n    PingServlet30Async pingServlet30Async0 = new PingServlet30Async();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet30Async0.doGet((HttpServletRequest) null, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet30Async\", e);\r\n    }\r\n}", "{\r\n    PingServlet30Async pingServlet30Async0 = new PingServlet30Async();\r\n    String string0 = pingServlet30Async0.getServletInfo();\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet30Async", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.TestServlet" : {
      "sequences" : [ "{\r\n    TestServlet testServlet0 = new TestServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    testServlet0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    TestServlet testServlet0 = new TestServlet();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    testServlet0.doPost((HttpServletRequest) null, httpServletResponseWrapper0);\r\n}", "{\r\n    TestServlet testServlet0 = new TestServlet();\r\n    testServlet0.init((ServletConfig) null);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.TestServlet", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.MarketSummaryJSF" : {
      "sequences" : [ "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    marketSummaryJSF0.setTopLosers((QuoteData[]) null);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    double double0 = marketSummaryJSF0.getVolume();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    marketSummaryJSF0.setOpenTSIA(bigDecimal0);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = marketSummaryJSF0.getGainPercent();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = marketSummaryJSF0.getOpenTSIA();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    marketSummaryJSF0.setVolume(3316.68049);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    marketSummaryJSF0.setTSIA(bigDecimal0);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = marketSummaryJSF0.getTSIA();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    marketSummaryJSF0.setSummaryDate((Date) null);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    marketSummaryJSF0.setGainPercent(bigDecimal0);\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    // Undeclared exception!\r\n    try {\r\n        marketSummaryJSF0.getGainPercentHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Date date0 = marketSummaryJSF0.getSummaryDate();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    QuoteData[] quoteDataArray0 = marketSummaryJSF0.getTopGainers();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    QuoteData[] quoteDataArray0 = marketSummaryJSF0.getTopLosers();\r\n}", "{\r\n    MarketSummaryJSF marketSummaryJSF0 = new MarketSummaryJSF();\r\n    TradeAction tradeAction0 = new TradeAction();\r\n    Injector.inject(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class, \"tradeAction\", (Object) tradeAction0);\r\n    Injector.validateBean(marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    Injector.executePostConstruct((Object) marketSummaryJSF0, (Class<?>) MarketSummaryJSF.class);\r\n    QuoteData[] quoteDataArray0 = new QuoteData[1];\r\n    marketSummaryJSF0.setTopGainers(quoteDataArray0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "java.util.Date", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.TradeAction", "com.ibm.websphere.samples.daytrader.web.jsf.MarketSummaryJSF", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.javaee.injection.Injector", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServletWriter" : {
      "sequences" : [ "{\r\n    PingServletWriter pingServletWriter0 = new PingServletWriter();\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingServletWriter0.init((ServletConfig) tradeConfigServlet0);\r\n}", "{\r\n    PingServletWriter pingServletWriter0 = new PingServletWriter();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServletWriter0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServletWriter pingServletWriter0 = new PingServletWriter();\r\n    String string0 = pingServletWriter0.getServletInfo();\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingServletWriter", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketBinary" : {
      "sequences" : [ "{\r\n    PingWebSocketBinary pingWebSocketBinary0 = new PingWebSocketBinary();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    pingWebSocketBinary0.onOpen(session0, endpointConfig0);\r\n}", "{\r\n    PingWebSocketBinary pingWebSocketBinary0 = new PingWebSocketBinary();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    doReturn(false).when(session0).isOpen();\r\n    CloseReason.CloseCodes closeReason_CloseCodes0 = CloseReason.CloseCodes.CLOSED_ABNORMALLY;\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCodes0, \"Ds%QGoW.MwE!DCOi\");\r\n    pingWebSocketBinary0.onClose(session0, closeReason0);\r\n}", "{\r\n    PingWebSocketBinary pingWebSocketBinary0 = new PingWebSocketBinary();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    doReturn(true).when(session0).isOpen();\r\n    CloseReason.CloseCodes closeReason_CloseCodes0 = CloseReason.CloseCodes.TOO_BIG;\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCodes0, \"{0@,+qOs9e[Y\");\r\n    pingWebSocketBinary0.onClose(session0, closeReason0);\r\n}", "{\r\n    PingWebSocketBinary pingWebSocketBinary0 = new PingWebSocketBinary();\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    pingWebSocketBinary0.onError(mockThrowable0);\r\n}", "{\r\n    PingWebSocketBinary pingWebSocketBinary0 = new PingWebSocketBinary();\r\n    // Undeclared exception!\r\n    try {\r\n        pingWebSocketBinary0.ping((ByteBuffer) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketBinary\", e);\r\n    }\r\n}" ],
      "imports" : [ "javax.websocket.Session", "static org.junit.Assert.assertNull", "javax.websocket.CloseReason", "javax.websocket.EndpointConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.nio.ByteBuffer", "com.ibm.websphere.samples.daytrader.web.prims.PingWebSocketBinary", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP" : {
      "sequences" : [ "{\r\n    PingJDBCRead2JSP pingJDBCRead2JSP0 = new PingJDBCRead2JSP();\r\n    SimpleSecurityDomain simpleSecurityDomain0 = new SimpleSecurityDomain();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher(simpleSecurityDomain0);\r\n    pingJDBCRead2JSP0.init((ServletConfig) tJWSServletDispatcher0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJDBCRead2JSP0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingJDBCRead2JSP pingJDBCRead2JSP0 = new PingJDBCRead2JSP();\r\n    TradeConfig.setPrimIterations(0);\r\n    SimpleSecurityDomain simpleSecurityDomain0 = new SimpleSecurityDomain();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher(simpleSecurityDomain0);\r\n    pingJDBCRead2JSP0.init((ServletConfig) tJWSServletDispatcher0);\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingJDBCRead2JSP0.doGet(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP\", e);\r\n    }\r\n}", "{\r\n    PingJDBCRead2JSP pingJDBCRead2JSP0 = new PingJDBCRead2JSP();\r\n    String string0 = pingJDBCRead2JSP0.getServletInfo();\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "org.jboss.resteasy.plugins.server.embedded.SimpleSecurityDomain", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead2JSP", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead" : {
      "sequences" : [ "{\r\n    PingJDBCRead pingJDBCRead0 = new PingJDBCRead();\r\n    String string0 = pingJDBCRead0.getServletInfo();\r\n}", "{\r\n    PingJDBCRead pingJDBCRead0 = new PingJDBCRead();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    TradeConfig.setPrimIterations(0);\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJDBCRead0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingJDBCRead pingJDBCRead0 = new PingJDBCRead();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJDBCRead0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingJDBCRead pingJDBCRead0 = new PingJDBCRead();\r\n    SimpleSecurityDomain simpleSecurityDomain0 = new SimpleSecurityDomain();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher(simpleSecurityDomain0);\r\n    pingJDBCRead0.init((ServletConfig) tJWSServletDispatcher0);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "org.jboss.resteasy.plugins.server.embedded.SimpleSecurityDomain", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.PingJDBCRead" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingManagedExecutor" : {
      "sequences" : [ "{\r\n    PingManagedExecutor pingManagedExecutor0 = new PingManagedExecutor();\r\n    ManagedExecutorService managedExecutorService0 = mock(ManagedExecutorService.class, new ViolatedAssumptionAnswer());\r\n    doReturn((Future) null).when(managedExecutorService0).submit(any(java.lang.Runnable.class));\r\n    Injector.inject(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class, \"mes\", (Object) managedExecutorService0);\r\n    Injector.validateBean(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class);\r\n    AsyncContext asyncContext0 = mock(AsyncContext.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn(asyncContext0).when(httpServletRequest0).startAsync();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingManagedExecutor0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingManagedExecutor pingManagedExecutor0 = new PingManagedExecutor();\r\n    ManagedExecutorService managedExecutorService0 = mock(ManagedExecutorService.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class, \"mes\", (Object) managedExecutorService0);\r\n    Injector.validateBean(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class);\r\n    String string0 = pingManagedExecutor0.getServletInfo();\r\n}", "{\r\n    PingManagedExecutor pingManagedExecutor0 = new PingManagedExecutor();\r\n    ManagedExecutorService managedExecutorService0 = mock(ManagedExecutorService.class, new ViolatedAssumptionAnswer());\r\n    Injector.inject(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class, \"mes\", (Object) managedExecutorService0);\r\n    Injector.validateBean(pingManagedExecutor0, (Class<?>) PingManagedExecutor.class);\r\n    TradeConfigServlet tradeConfigServlet0 = new TradeConfigServlet();\r\n    pingManagedExecutor0.init((ServletConfig) tradeConfigServlet0);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.prims.PingManagedExecutor", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.AsyncContext", "java.util.concurrent.Future", "javax.servlet.http.HttpServletRequest", "javax.enterprise.concurrent.ManagedExecutorService", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "com.ibm.websphere.samples.daytrader.web.TradeConfigServlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.javaee.injection.Injector", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.JSFLoginFilter" : {
      "sequences" : [ "{\r\n    JSFLoginFilter jSFLoginFilter0 = new JSFLoginFilter();\r\n    FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());\r\n    jSFLoginFilter0.doFilter((ServletRequest) null, (ServletResponse) null, filterChain0);\r\n}", "{\r\n    JSFLoginFilter jSFLoginFilter0 = new JSFLoginFilter();\r\n    FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());\r\n    jSFLoginFilter0.init(filterConfig0);\r\n    // Undeclared exception!\r\n    try {\r\n        jSFLoginFilter0.doFilter((ServletRequest) null, (ServletResponse) null, (FilterChain) null);\r\n    } catch (NullPointerException e) {\r\n    // \r\n    // no message in exception (getMessage() returned null)\r\n    // \r\n    }\r\n}", "{\r\n    JSFLoginFilter jSFLoginFilter0 = new JSFLoginFilter();\r\n    jSFLoginFilter0.destroy();\r\n}" ],
      "imports" : [ "javax.servlet.FilterChain", "javax.servlet.ServletRequest", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.web.jsf.JSFLoginFilter", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletResponse", "org.evosuite.runtime.EvoRunner", "javax.servlet.FilterConfig", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TradeConfig" : {
      "sequences" : [ "{\r\n    TradeConfig.setScenarioCount(0);\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_QUOTES();\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getRunTimeModeNames();\r\n}", "{\r\n    String string0 = TradeConfig.rndEmail(\"\");\r\n}", "{\r\n    TradeConfig.setConfigParam(\"\", \"uid:0\");\r\n}", "{\r\n    String string0 = TradeConfig.rndFullName();\r\n}", "{\r\n    TradeConfig.setPercentSentToWebsocket((-1568));\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getPublishQuotePriceChange();\r\n}", "{\r\n    TradeConfig.setRunTimeMode(0);\r\n}", "{\r\n    TradeConfig.setWebInterface(1);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();\r\n}", "{\r\n    TradeConfig.setMAX_USERS(1);\r\n    String string0 = TradeConfig.rndUserID();\r\n    String string1 = TradeConfig.rndUserID();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"webinterface\", \"\\\"rzC!*G6(#=UA#*w\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    TradeConfig.setConfigParam(\"orderprocessingmode\", \"1000000\");\r\n}", "{\r\n    TradeConfig.setMAX_QUOTES(0);\r\n}", "{\r\n    TradeConfig.setMAX_HOLDINGS(582);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getActionTrace();\r\n}", "{\r\n    int int0 = TradeConfig.getMarketSummaryInterval();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getLongRun();\r\n}", "{\r\n    TradeConfig.setPrimIterations(4383);\r\n}", "{\r\n    TradeConfig.incrementSellDeficit();\r\n}", "{\r\n    TradeConfig.setLongRun(false);\r\n}", "{\r\n    TradeConfig.setJDBCDriverNeedsGlobalTransation(true);\r\n}", "{\r\n    TradeConfig.setMAX_USERS(1);\r\n    String string0 = TradeConfig.nextUserID();\r\n}", "{\r\n    int int0 = TradeConfig.getAccessMode();\r\n}", "{\r\n    String string0 = TradeConfig.rndAddress();\r\n}", "{\r\n    int int0 = TradeConfig.getOrderProcessingMode();\r\n}", "{\r\n    String string0 = TradeConfig.nextUserID();\r\n}", "{\r\n    int int0 = TradeConfig.getMAX_HOLDINGS();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal((-2806));\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"SELL\");\r\n}", "{\r\n    TradeConfig.setConfigParam(\"primiterations\", \"P]]iC;y!\");\r\n}", "{\r\n    TradeConfig.setOrderProcessingMode(0);\r\n}", "{\r\n    String string0 = TradeConfig.rndNewUserID();\r\n    String string1 = TradeConfig.rndNewUserID();\r\n}", "{\r\n    String string0 = TradeConfig.rndSymbols();\r\n    float float0 = TradeConfig.rndQuantity();\r\n    char char0 = TradeConfig.getScenarioAction(true);\r\n    BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();\r\n}", "{\r\n    // Undeclared exception!\r\n    TradeConfig.getUserID();\r\n}", "{\r\n    TradeConfig.setPublishQuotePriceChange(true);\r\n}", "{\r\n    TradeConfig.setTrace(false);\r\n}", "{\r\n    TradeConfig.setDisplayOrderAlerts(false);\r\n}", "{\r\n    TradeConfig tradeConfig0 = new TradeConfig();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getUpdateQuotePrices();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"\\\"6m@~%Xx-AgpLi;%li\", (String) null);\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getWebInterfaceNames();\r\n}", "{\r\n    TradeConfig.setUpdateQuotePrices(false);\r\n}", "{\r\n    TradeConfig.setAccessMode(0);\r\n}", "{\r\n    int int0 = TradeConfig.getWebInterface();\r\n}", "{\r\n    String string0 = TradeConfig.rndSymbol();\r\n    String string1 = TradeConfig.rndCreditCard();\r\n    String string2 = TradeConfig.rndAddress();\r\n    String string3 = TradeConfig.rndSymbol();\r\n    float float0 = TradeConfig.rndPrice();\r\n    String string4 = TradeConfig.rndSymbol();\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    TradeConfig.setConfigParam((String) null, \"JBo|~s\");\r\n}", "{\r\n    int int0 = TradeConfig.getPercentSentToWebsocket();\r\n}", "{\r\n    char char0 = TradeConfig.getScenarioAction(false);\r\n}", "{\r\n    String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();\r\n    TradeConfig.setRunTimeModeNames(stringArray0);\r\n}", "{\r\n    int[][] intArray0 = TradeConfig.getScenarioMixes();\r\n}", "{\r\n    String string0 = TradeConfig.getPage(1);\r\n}", "{\r\n    String string0 = TradeConfig.rndBalance();\r\n}", "{\r\n    int int0 = TradeConfig.getRunTimeMode();\r\n}", "{\r\n    TradeConfig.setConfigParam(\"uid:0\", \"!c9|-DCu?l~B\");\r\n}", "{\r\n    TradeConfig.setActionTrace(false);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.rndBoolean();\r\n}", "{\r\n    TradeConfig.setUseRemoteEJBInterface(false);\r\n}", "{\r\n    int int0 = TradeConfig.getPrimIterations();\r\n}", "{\r\n    int int0 = TradeConfig.getScenarioCount();\r\n}", "{\r\n    BigDecimal bigDecimal0 = TradeConfig.getOrderFee(\"\");\r\n}", "{\r\n    String string0 = TradeConfig.rndSymbols();\r\n    String string1 = TradeConfig.rndSymbols();\r\n}", "{\r\n    TradeConfig.setMarketSummaryInterval(1);\r\n}", "{\r\n    boolean boolean0 = TradeConfig.useRemoteEJBInterface();\r\n}", "{\r\n    boolean boolean0 = TradeConfig.getDisplayOrderAlerts();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData" : {
      "sequences" : [ "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1.0));\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getGain();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ONE;\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"HOoSJ%1{y#/\", bigDecimal0, bigDecimal0, \"HOoSJ%1{y#/\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getLow();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", double0, double0);\r\n    quoteData0.setChange(922L);\r\n    String string0 = quoteData0.getChangeHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", double0, double0);\r\n    double double1 = quoteData0.getVolume();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1.0));\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setSymbol((String) null);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setCompanyName(\"<FONT color=\\\"#009900\\\">\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1.0));\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setRange(\"arrowdown.gif\");\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1.0));\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setGain(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1.0));\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    String string0 = quoteData0.getGainPercentHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setVolume(912.46);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setPrice(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    BigDecimal bigDecimal1 = quoteData0.getOpen();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1824);\r\n    Double double0 = new Double(1824);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"arrowup.gif\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    quoteData0.setOpen(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1008L);\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"</A>\", double0, double0);\r\n    String string0 = quoteData0.getSymbol();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    double double0 = quoteData0.getChange();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getHigh();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    Double double0 = new Double(70.373);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", bigDecimal0, bigDecimal0, (String) null, double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getGainPercent();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setHigh(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(1008L);\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"</A>\", double0, double0);\r\n    quoteData0.setGainPercent(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    quoteData0.setLow(bigDecimal0);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    Double double0 = new Double(70.373);\r\n    Double double1 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", bigDecimal0, bigDecimal0, (String) null, double0, double1);\r\n    String string0 = quoteData0.getChangeHTML();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-1986));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"<A href=\\\"app?action=quotes&symbols=\");\r\n    String string0 = quoteData0.getCompanyName();\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal(0);\r\n    Double double0 = new Double(0.0);\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\", bigDecimal0, bigDecimal0, \"\", double0, double0);\r\n    BigDecimal bigDecimal1 = quoteData0.getPrice();\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"\");\r\n    // Undeclared exception!\r\n    try {\r\n        quoteData0.getGainHTML();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    Double double0 = new Double((-1.0));\r\n    QuoteData quoteData0 = new QuoteData(bigDecimal0, bigDecimal0, \"</A>\", bigDecimal0, bigDecimal0, \"\\\" width=\\\"10\\\" height=\\\"10\\\" border=\\\"0\\\"></IMG>\", double0, double0);\r\n    String string0 = quoteData0.getRange();\r\n}" ],
      "imports" : [ "java.math.BigDecimal", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "com.ibm.websphere.samples.daytrader.web.jsf.QuoteData", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include" : {
      "sequences" : [ "{\r\n    PingServlet2Include pingServlet2Include0 = new PingServlet2Include();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    TradeConfig.setPrimIterations((-485));\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2Include0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2Include pingServlet2Include0 = new PingServlet2Include();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2Include0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2Include pingServlet2Include0 = new PingServlet2Include();\r\n    pingServlet2Include0.init((ServletConfig) null);\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Include", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet31AsyncRead" : {
      "sequences" : [ "{\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    pingServlet31AsyncRead0.init((ServletConfig) pingServlet31AsyncRead0);\r\n}", "{\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31AsyncRead.ReadListenerImpl pingServlet31AsyncRead_ReadListenerImpl0 = pingServlet31AsyncRead0.new ReadListenerImpl((ServletInputStream) null, httpServletResponseWrapper0, (AsyncContext) null);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31AsyncRead_ReadListenerImpl0.onAllDataRead();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31AsyncRead$ReadListenerImpl\", e);\r\n    }\r\n}", "{\r\n    ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());\r\n    doReturn((-1)).when(servletInputStream0).read(any(byte[].class));\r\n    doReturn(true).when(servletInputStream0).isReady();\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31AsyncRead.ReadListenerImpl pingServlet31AsyncRead_ReadListenerImpl0 = pingServlet31AsyncRead0.new ReadListenerImpl(servletInputStream0, httpServletResponseWrapper0, (AsyncContext) null);\r\n    pingServlet31AsyncRead_ReadListenerImpl0.onDataAvailable();\r\n}", "{\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31AsyncRead.ReadListenerImpl pingServlet31AsyncRead_ReadListenerImpl0 = pingServlet31AsyncRead0.new ReadListenerImpl((ServletInputStream) null, httpServletResponseWrapper0, (AsyncContext) null);\r\n    MockThrowable mockThrowable0 = new MockThrowable(\"Z8n8(#HTfp\");\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31AsyncRead_ReadListenerImpl0.onError(mockThrowable0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31AsyncRead$ReadListenerImpl\", e);\r\n    }\r\n}", "{\r\n    ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());\r\n    doReturn(0).when(servletInputStream0).read(any(byte[].class));\r\n    doReturn(true, false).when(servletInputStream0).isReady();\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31AsyncRead.ReadListenerImpl pingServlet31AsyncRead_ReadListenerImpl0 = pingServlet31AsyncRead0.new ReadListenerImpl(servletInputStream0, httpServletResponseWrapper0, (AsyncContext) null);\r\n    pingServlet31AsyncRead_ReadListenerImpl0.onDataAvailable();\r\n}", "{\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();\r\n    doReturn((AsyncContext) null).when(httpServletRequest0).startAsync();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31AsyncRead0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31AsyncRead\", e);\r\n    }\r\n}", "{\r\n    PingServlet31AsyncRead pingServlet31AsyncRead0 = new PingServlet31AsyncRead();\r\n    String string0 = pingServlet31AsyncRead0.getServletInfo();\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.ServletInputStream", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet31AsyncRead", "javax.servlet.AsyncContext", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.direct.TradeDirect" : {
      "sequences" : [ "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer((-459));\r\n    OrderDataBean orderDataBean0 = tradeDirect0.completeOrder(integer0, true);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    BigDecimal bigDecimal0 = new BigDecimal(3059.15);\r\n    try {\r\n        tradeDirect0.updateQuotePriceVolumeInt(\"\", bigDecimal0, (-2139.53472), true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    MarketSummaryDataBean marketSummaryDataBean0 = tradeDirect0.getMarketSummary();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.getQuote((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = tradeDirect0.updateAccountProfile((AccountProfileDataBean) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    OrderDataBean orderDataBean0 = tradeDirect0.sell(\"Y\", (Integer) null, 0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.orderCompleted(\"IFq>A.OHjc{@\", (Integer) null);\r\n    } catch (UnsupportedOperationException e) {\r\n        // \r\n        // TradeDirect:orderCompleted method not supported\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setUpdateQuotePrices(false);\r\n    BigDecimal bigDecimal0 = new BigDecimal(2602);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.updateQuotePriceVolume(\"q1UI /kd~DlHp\", bigDecimal0, 2562.799636451);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(0);\r\n    try {\r\n        tradeDirect0.completeOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountProfileDataBean accountProfileDataBean0 = tradeDirect0.getAccountProfileData(\"'Y[2]`*i\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(100000);\r\n    try {\r\n        tradeDirect0.completeOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(2995);\r\n    try {\r\n        tradeDirect0.queueOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.login(\"@T \", \"Y\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    BigDecimal bigDecimal0 = new BigDecimal(0L);\r\n    QuoteDataBean quoteDataBean0 = tradeDirect0.createQuote((String) null, (String) null, bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeConfig.setTrace(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getClosedOrders(\"\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    TradeConfig.setTrace(true);\r\n    try {\r\n        tradeDirect0.getHolding((Integer) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    try {\r\n        tradeDirect0.getConnPublic();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Integer integer0 = new Integer(0);\r\n    HoldingDataBean holdingDataBean0 = tradeDirect0.getHolding(integer0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.resetTrade(true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\r\n    AccountDataBean accountDataBean0 = tradeDirect0.register(\"Np\", \"Np\", \"<LI>      volume: \", (String) null, \"1U&4S\\\"/jOet5;bm\", (String) null, bigDecimal0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Object[] objectArray0 = new Object[7];\r\n    MockFile mockFile0 = new MockFile(\"N';\", \"N';\");\r\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);\r\n    Charset charset0 = Charset.defaultCharset();\r\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);\r\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);\r\n    boolean boolean0 = tradeDirect0.recreateDBTables(objectArray0, mockPrintWriter0);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    TradeConfig.setTrace(true);\r\n    try {\r\n        tradeDirect0.resetTrade(true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    TradeDirect.destroy();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    MarketSummaryDataBean marketSummaryDataBean0 = tradeDirect0.getMarketSummary();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    tradeDirect0.logout((String) null);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    TradeDirect.init();\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    Integer integer0 = new Integer(3274);\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, false);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getClosedOrders(\"<LI>      volume: \");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(false);\r\n    TradeConfig.setTrace(true);\r\n    Integer integer0 = new Integer(40);\r\n    try {\r\n        tradeDirect0.sell(\"\", integer0, 40);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    BigDecimal bigDecimal0 = new BigDecimal(2602);\r\n    try {\r\n        tradeDirect0.updateQuotePriceVolume(\"q1UI /kd~DlHp\", bigDecimal0, 2562.799636451);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(\"TradeDirect:resetTrade deleteAll rows=\");\r\n}", "{\r\n    TradeDirect.init();\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<OrderDataBean> collection0 = tradeDirect0.getOrders(\"\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    try {\r\n        tradeDirect0.checkDBProductName();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    AccountDataBean accountDataBean0 = tradeDirect0.getAccountData(803);\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect(true);\r\n    Collection<HoldingDataBean> collection0 = tradeDirect0.getHoldings(\"\");\r\n}", "{\r\n    TradeDirect tradeDirect0 = new TradeDirect();\r\n    Integer integer0 = new Integer(4);\r\n    try {\r\n        tradeDirect0.cancelOrder(integer0, true);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.direct.TradeDirect\", e);\r\n    }\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Collection", "com.ibm.websphere.samples.daytrader.entities.AccountDataBean", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "com.ibm.websphere.samples.daytrader.direct.TradeDirect", "java.math.BigDecimal", "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "org.evosuite.runtime.mock.java.io.MockPrintWriter", "java.nio.charset.Charset", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.io.OutputStreamWriter", "org.evosuite.runtime.mock.java.io.MockFileOutputStream", "static org.junit.Assert.assertEquals", "org.evosuite.runtime.mock.java.io.MockFile", "com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean", "com.ibm.websphere.samples.daytrader.entities.OrderDataBean" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean" : {
      "sequences" : [ "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    LinkedList<QuoteDataBean> linkedList0 = new LinkedList<QuoteDataBean>();\r\n    marketSummaryDataBean0.setTopGainers(linkedList0);\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = new MarketSummaryDataBean();\r\n    // Undeclared exception!\r\n    try {\r\n        marketSummaryDataBean0.toString();\r\n    } catch (NullPointerException e) {\r\n    // \r\n    // no message in exception (getMessage() returned null)\r\n    // \r\n    }\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.print();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.setTopLosers((Collection<QuoteDataBean>) null);\r\n    String string0 = marketSummaryDataBean0.toString();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    String string0 = marketSummaryDataBean0.toHTML();\r\n}", "{\r\n    MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();\r\n    marketSummaryDataBean0.setTopGainers((Collection<QuoteDataBean>) null);\r\n    marketSummaryDataBean0.print();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "java.util.Collection", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", "java.util.LinkedList" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingJSONP" : {
      "sequences" : [ "{\r\n    PingJSONP pingJSONP0 = new PingJSONP();\r\n    String string0 = pingJSONP0.getServletInfo();\r\n}", "{\r\n    PingJSONP pingJSONP0 = new PingJSONP();\r\n    TJWSServletDispatcher tJWSServletDispatcher0 = new TJWSServletDispatcher();\r\n    pingJSONP0.init((ServletConfig) tJWSServletDispatcher0);\r\n}", "{\r\n    PingJSONP pingJSONP0 = new PingJSONP();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingJSONP0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.jboss.resteasy.plugins.server.tjws.TJWSServletDispatcher", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "com.ibm.websphere.samples.daytrader.web.prims.PingJSONP", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingBean" : {
      "sequences" : [ "{\r\n    PingBean pingBean0 = new PingBean();\r\n    pingBean0.setMsg(\"\");\r\n}", "{\r\n    PingBean pingBean0 = new PingBean();\r\n    String string0 = pingBean0.getMsg();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.web.prims.PingBean", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.FinancialUtils" : {
      "sequences" : [ "{\r\n    String string0 = FinancialUtils.printChangeHTML((-3421.61309130518));\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-3774L));\r\n    FinancialUtils financialUtils0 = new FinancialUtils();\r\n    BigDecimal bigDecimal1 = FinancialUtils.computeGain(bigDecimal0, financialUtils0.ONE);\r\n}", "{\r\n    String string0 = FinancialUtils.printChangeHTML(1.0);\r\n}", "{\r\n    FinancialUtils financialUtils0 = new FinancialUtils();\r\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();\r\n    boolean boolean0 = linkedHashSet0.add(financialUtils0.SCALE);\r\n    // Undeclared exception!\r\n    try {\r\n        FinancialUtils.computeHoldingsTotal(linkedHashSet0);\r\n    } catch (ClassCastException e) {\r\n        // \r\n        // java.lang.Integer cannot be cast to com.ibm.websphere.samples.daytrader.entities.HoldingDataBean\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.util.FinancialUtils\", e);\r\n    }\r\n}", "{\r\n    BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal((Collection<?>) null);\r\n}", "{\r\n    BigDecimal bigDecimal0 = new BigDecimal((-3774L));\r\n    String string0 = FinancialUtils.printGainPercentHTML(bigDecimal0);\r\n}", "{\r\n    FinancialUtils financialUtils0 = new FinancialUtils();\r\n    String string0 = FinancialUtils.printGainHTML(financialUtils0.ONE);\r\n}", "{\r\n    LinkedList<HoldingDataBean> linkedList0 = new LinkedList<HoldingDataBean>();\r\n    BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal(linkedList0);\r\n}", "{\r\n    String string0 = FinancialUtils.printQuoteLink(\"\");\r\n}", "{\r\n    FinancialUtils financialUtils0 = new FinancialUtils();\r\n    BigDecimal bigDecimal0 = FinancialUtils.computeGainPercent(financialUtils0.ZERO, financialUtils0.HUNDRED);\r\n}", "{\r\n    FinancialUtils financialUtils0 = new FinancialUtils();\r\n    String string0 = FinancialUtils.printGainPercentHTML(financialUtils0.ZERO);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.util.FinancialUtils", "static org.junit.Assert.assertNull", "com.ibm.websphere.samples.daytrader.entities.HoldingDataBean", "java.util.Collection", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "java.math.BigDecimal", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "java.util.LinkedList", "java.util.LinkedHashSet" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.MDBStats" : {
      "sequences" : [ "{\r\n    MDBStats mDBStats0 = MDBStats.getInstance();\r\n    mDBStats0.reset();\r\n}", "{\r\n    MDBStats mDBStats0 = MDBStats.getInstance();\r\n    MDBStats mDBStats1 = MDBStats.getInstance();\r\n}", "{\r\n    MDBStats mDBStats0 = MDBStats.getInstance();\r\n    TimerStat timerStat0 = mDBStats0.addTiming(\"@&:H+?z|SjClNvV{oQ.\", 176L, 0L);\r\n    TimerStat timerStat1 = mDBStats0.addTiming(\"@&:H+?z|SjClNvV{oQ.\", 80L, 2352L);\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.util.MDBStats", "com.ibm.websphere.samples.daytrader.util.TimerStat", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.Log" : {
      "sequences" : [ "{\r\n    Log.debug(\"revering to current value: \");\r\n}", "{\r\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\" threadID=\");\r\n    Log.printObject(mockPrintStream0);\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.error((Throwable) mockThrowable0, \"\");\r\n}", "{\r\n    boolean boolean0 = Log.doStat();\r\n}", "{\r\n    Integer integer0 = new Integer(2433);\r\n    Log.trace(\"QXlNH;Ro;?/5 ]X\\\"C\", (Object) \"\", (Object) null, (Object) null, (Object) integer0, (Object) \"HWn:K5z$*i2cR,%Q^v\");\r\n}", "{\r\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\r\n    Integer integer0 = linkedList0.pollFirst();\r\n    boolean boolean0 = linkedList0.add(integer0);\r\n    // Undeclared exception!\r\n    try {\r\n        Log.printCollection(\"DnZjl/.k\", (Collection<?>) linkedList0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"org.evosuite.runtime.System\", e);\r\n    }\r\n}", "{\r\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\r\n    Integer integer0 = linkedList0.pollFirst();\r\n    Log.trace(\"aNw+:8{U=K&22Zbc\", (Object) integer0);\r\n}", "{\r\n    Object object0 = new Object();\r\n    Log.trace(\"@\", (Object) \"@\", object0, (Object) \"(\", object0, object0, object0, object0);\r\n}", "{\r\n    boolean boolean0 = Log.doDebug();\r\n}", "{\r\n    Log.print(\"aNw+:8{U=K&22Zbc\");\r\n}", "{\r\n    Log log0 = new Log();\r\n}", "{\r\n    Object object0 = new Object();\r\n    Log.trace(\"\", (Object) \"9g*\", (Object) null, object0, object0);\r\n}", "{\r\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\r\n    Log.printCollection(\"DnZjl/.k\", (Collection<?>) linkedList0);\r\n}", "{\r\n    Object object0 = new Object();\r\n    Log.trace(\"^Pf7\", (Object) \"^Pf7\", (Object) \"^Pf7\", object0, (Object) null, (Object) \"^Pf7\", (Object) \"^Pf7\");\r\n}", "{\r\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\" threadID=\");\r\n    Log.trace(\"\", (Object) null, (Object) mockPrintStream0);\r\n}", "{\r\n    boolean boolean0 = Log.doActionTrace();\r\n}", "{\r\n    boolean boolean0 = Log.doTrace();\r\n}", "{\r\n    Log.log(\"@\", \"@\");\r\n}", "{\r\n    Log.traceExit(\"gQ}z>Hg`RG~Ap0oeJq\");\r\n}", "{\r\n    Log.setTrace(true);\r\n    boolean boolean0 = Log.doActionTrace();\r\n}", "{\r\n    Log.stat((String) null);\r\n}", "{\r\n    Log.log((String) null, (String) null, \"<]JW_%97)]c9l8\\\"`\");\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.error(\" threadID=\", \" threadID=\", (String) null, (Throwable) mockThrowable0);\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.error(\"%95jwjXFz\", \"I7`}sppLke7mC\\\"^wmb\", (Throwable) mockThrowable0);\r\n}", "{\r\n    Log.traceEnter(\"2C%5C\");\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.error((Throwable) mockThrowable0, \"\", \"\", \"\");\r\n}", "{\r\n    Log.setActionTrace(true);\r\n    boolean boolean0 = Log.doActionTrace();\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.trace(\"\", (Object) mockThrowable0, (Object) \"\", (Object) \"\");\r\n}", "{\r\n    MockThrowable mockThrowable0 = new MockThrowable();\r\n    Log.error((Throwable) mockThrowable0, \"\", \"\");\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "java.util.Collection", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.util.Log", "org.evosuite.runtime.mock.java.io.MockPrintStream", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "static org.junit.Assert.assertEquals", "java.util.LinkedList", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.util.TimerStat" : {
      "sequences" : [ "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMax();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setCount((-1016));\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMax(0.0);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMaxSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setTotalTime(7159.73943095);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getAvgSecs();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMin();\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    timerStat0.setMin(0.0);\r\n}", "{\r\n    TimerStat timerStat0 = new TimerStat();\r\n    double double0 = timerStat0.getMinSecs();\r\n}" ],
      "imports" : [ "com.ibm.websphere.samples.daytrader.util.TimerStat", "static org.junit.Assert.assertNull", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB" : {
      "sequences" : [ "{\r\n    PingServlet2DB pingServlet2DB0 = new PingServlet2DB();\r\n    String string0 = pingServlet2DB0.getServletInfo();\r\n}", "{\r\n    PingServlet2DB pingServlet2DB0 = new PingServlet2DB();\r\n    TestServlet testServlet0 = new TestServlet();\r\n    pingServlet2DB0.init((ServletConfig) testServlet0);\r\n}", "{\r\n    PingServlet2DB pingServlet2DB0 = new PingServlet2DB();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet2DB0.doPost(httpServletRequestWrapper0, (HttpServletResponse) null);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB\", e);\r\n    }\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "com.ibm.websphere.samples.daytrader.web.TestServlet", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2DB", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Servlet" : {
      "sequences" : [ "{\r\n    PingServlet2Servlet pingServlet2Servlet0 = new PingServlet2Servlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2Servlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2Servlet", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.websocket.MarketSummaryWebSocket" : {
      "sequences" : [ "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    TradeConfig.setTrace(true);\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    actionMessage0.decodedAction = \"G03RgYv\";\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.sendMarketSummary(actionMessage0, session0);\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    TradeConfig.setTrace(true);\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.sendMarketSummary(actionMessage0, session0);\r\n}", "{\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    // Undeclared exception!\r\n    try {\r\n        MarketSummaryWebSocket.onJMSMessage(message0);\r\n    } catch (JsonException e) {\r\n        // \r\n        // Provider org.glassfish.json.JsonProviderImpl not found\r\n        // \r\n        verifyException(\"javax.json.spi.JsonProvider\", e);\r\n    }\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    CloseReason.CloseCodes closeReason_CloseCodes0 = CloseReason.CloseCodes.CLOSED_ABNORMALLY;\r\n    CloseReason closeReason0 = new CloseReason(closeReason_CloseCodes0, \"MarketSummaryWebSocket:onJMSMessage\");\r\n    marketSummaryWebSocket0.onClose((Session) null, closeReason0);\r\n}", "{\r\n    TradeConfig.setTrace(true);\r\n    Message message0 = mock(Message.class, new ViolatedAssumptionAnswer());\r\n    // Undeclared exception!\r\n    try {\r\n        MarketSummaryWebSocket.onJMSMessage(message0);\r\n    } catch (JsonException e) {\r\n        // \r\n        // Provider org.glassfish.json.JsonProviderImpl not found\r\n        // \r\n        verifyException(\"javax.json.spi.JsonProvider\", e);\r\n    }\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    TradeConfig.setTrace(true);\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(session0).toString();\r\n    marketSummaryWebSocket0.onClose(session0, (CloseReason) null);\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    MockThrowable mockThrowable0 = new MockThrowable(\"i[,\\\"w,^;*R\");\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.onError(mockThrowable0, session0);\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    TradeConfig.setTrace(true);\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(session0).toString();\r\n    // Undeclared exception!\r\n    try {\r\n        marketSummaryWebSocket0.onError((Throwable) null, session0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.websocket.MarketSummaryWebSocket\", e);\r\n    }\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    ActionMessage actionMessage0 = new ActionMessage();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.sendMarketSummary(actionMessage0, session0);\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    doReturn((String) null).when(session0).toString();\r\n    TradeConfig.setTrace(true);\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.onOpen(session0, endpointConfig0);\r\n}", "{\r\n    MarketSummaryWebSocket marketSummaryWebSocket0 = new MarketSummaryWebSocket();\r\n    Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());\r\n    EndpointConfig endpointConfig0 = mock(EndpointConfig.class, new ViolatedAssumptionAnswer());\r\n    marketSummaryWebSocket0.onOpen(session0, endpointConfig0);\r\n}" ],
      "imports" : [ "javax.websocket.Session", "static org.junit.Assert.assertNull", "javax.websocket.CloseReason", "javax.websocket.EndpointConfig", "com.ibm.websphere.samples.daytrader.util.TradeConfig", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "com.ibm.websphere.samples.daytrader.web.websocket.MarketSummaryWebSocket", "org.evosuite.runtime.EvoRunner", "javax.json.JsonException", "com.ibm.websphere.samples.daytrader.web.websocket.ActionMessage", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "javax.jms.Message", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet" : {
      "sequences" : [ "{\r\n    PingServlet pingServlet0 = new PingServlet();\r\n    HttpServletDispatcher httpServletDispatcher0 = new HttpServletDispatcher();\r\n    pingServlet0.init((ServletConfig) httpServletDispatcher0);\r\n}", "{\r\n    PingServlet pingServlet0 = new PingServlet();\r\n    String string0 = pingServlet0.getServletInfo();\r\n}", "{\r\n    PingServlet pingServlet0 = new PingServlet();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet", "javax.servlet.http.HttpServletResponseWrapper", "org.evosuite.runtime.ViolatedAssumptionAnswer", "org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2JNDI" : {
      "sequences" : [ "{\r\n    PingServlet2JNDI pingServlet2JNDI0 = new PingServlet2JNDI();\r\n    pingServlet2JNDI0.init((ServletConfig) null);\r\n}", "{\r\n    PingServlet2JNDI pingServlet2JNDI0 = new PingServlet2JNDI();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    pingServlet2JNDI0.doPost(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n}", "{\r\n    PingServlet2JNDI pingServlet2JNDI0 = new PingServlet2JNDI();\r\n    String string0 = pingServlet2JNDI0.getServletInfo();\r\n}" ],
      "imports" : [ "java.io.PrintWriter", "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet2JNDI", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    },
    "com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async" : {
      "sequences" : [ "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());\r\n    doReturn((-1)).when(servletInputStream0).read(any(byte[].class));\r\n    doReturn(true).when(servletInputStream0).isReady();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31Async.ReadListenerImpl pingServlet31Async_ReadListenerImpl0 = pingServlet31Async0.new ReadListenerImpl(servletInputStream0, httpServletResponseWrapper0, (AsyncContext) null);\r\n    pingServlet31Async_ReadListenerImpl0.onDataAvailable();\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31Async.ReadListenerImpl pingServlet31Async_ReadListenerImpl0 = pingServlet31Async0.new ReadListenerImpl((ServletInputStream) null, httpServletResponseWrapper0, (AsyncContext) null);\r\n    MockThrowable mockThrowable0 = new MockThrowable(\",EGT@}VYyd<?Mx`hC\");\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31Async_ReadListenerImpl0.onError(mockThrowable0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async$ReadListenerImpl\", e);\r\n    }\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());\r\n    doReturn(0).when(servletInputStream0).read(any(byte[].class));\r\n    doReturn(true, false).when(servletInputStream0).isReady();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31Async.ReadListenerImpl pingServlet31Async_ReadListenerImpl0 = pingServlet31Async0.new ReadListenerImpl(servletInputStream0, httpServletResponseWrapper0, (AsyncContext) null);\r\n    pingServlet31Async_ReadListenerImpl0.onDataAvailable();\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    TradeAppServlet tradeAppServlet0 = new TradeAppServlet();\r\n    pingServlet31Async0.init((ServletConfig) tradeAppServlet0);\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    PingServlet31Async.ReadListenerImpl pingServlet31Async_ReadListenerImpl0 = pingServlet31Async0.new ReadListenerImpl((ServletInputStream) null, httpServletResponseWrapper0, (AsyncContext) null);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31Async_ReadListenerImpl0.onAllDataRead();\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async$WriteListenerImpl\", e);\r\n    }\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    String string0 = pingServlet31Async0.getServletInfo();\r\n}", "{\r\n    PingServlet31Async pingServlet31Async0 = new PingServlet31Async();\r\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\r\n    doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();\r\n    doReturn((AsyncContext) null).when(httpServletRequest0).startAsync();\r\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\r\n    HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());\r\n    HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);\r\n    // Undeclared exception!\r\n    try {\r\n        pingServlet31Async0.doGet(httpServletRequestWrapper0, httpServletResponseWrapper0);\r\n    } catch (NullPointerException e) {\r\n        // \r\n        // no message in exception (getMessage() returned null)\r\n        // \r\n        verifyException(\"com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async\", e);\r\n    }\r\n}" ],
      "imports" : [ "javax.servlet.ServletConfig", "static org.junit.Assert.assertNull", "javax.servlet.ServletInputStream", "javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletResponse", "org.junit.runner.RunWith", "static org.evosuite.runtime.EvoAssertions.*", "org.junit.Test", "static org.junit.Assert.*", "javax.servlet.AsyncContext", "javax.servlet.http.HttpServletRequest", "static org.evosuite.shaded.org.mockito.Mockito.*", "org.evosuite.runtime.EvoRunnerParameters", "javax.servlet.ServletOutputStream", "org.evosuite.runtime.EvoRunner", "javax.servlet.http.HttpServletResponseWrapper", "com.ibm.websphere.samples.daytrader.web.TradeAppServlet", "org.evosuite.runtime.ViolatedAssumptionAnswer", "static org.junit.Assert.assertEquals", "com.ibm.websphere.samples.daytrader.web.prims.PingServlet31Async", "org.evosuite.runtime.mock.java.lang.MockThrowable" ],
      "before_after_code_segments" : [ "initEvoSuiteFramework", "clearEvoSuiteFramework", "initTestCase", "doneWithTestCase" ]
    }
  },
  "test_generation_tool" : "EvoSuiteTestGenerator"
}